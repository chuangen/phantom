/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// ChannelBulb
    /// </summary>
    [DataContract]
    public partial class ChannelBulb :  IEquatable<ChannelBulb>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelBulb" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelBulb() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelBulb" /> class.
        /// </summary>
        /// <param name="Id">ID (required).</param>
        /// <param name="TurnedOn">是否已开机 (required).</param>
        /// <param name="BulbIdentifier">设备标示符 (required).</param>
        /// <param name="Name">设备的名字 (required).</param>
        /// <param name="WallSwitchId">墙面开关 ID (required).</param>
        /// <param name="Channel">位于墙面开关的第几路.</param>
        public ChannelBulb(int? Id = default(int?), int? TurnedOn = default(int?), string BulbIdentifier = default(string), string Name = default(string), int? WallSwitchId = default(int?), int? Channel = default(int?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for ChannelBulb and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "TurnedOn" is required (not null)
            if (TurnedOn == null)
            {
                throw new InvalidDataException("TurnedOn is a required property for ChannelBulb and cannot be null");
            }
            else
            {
                this.TurnedOn = TurnedOn;
            }
            // to ensure "BulbIdentifier" is required (not null)
            if (BulbIdentifier == null)
            {
                throw new InvalidDataException("BulbIdentifier is a required property for ChannelBulb and cannot be null");
            }
            else
            {
                this.BulbIdentifier = BulbIdentifier;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ChannelBulb and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "WallSwitchId" is required (not null)
            if (WallSwitchId == null)
            {
                throw new InvalidDataException("WallSwitchId is a required property for ChannelBulb and cannot be null");
            }
            else
            {
                this.WallSwitchId = WallSwitchId;
            }
            this.Channel = Channel;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 是否已开机
        /// </summary>
        /// <value>是否已开机</value>
        [DataMember(Name="turned_on", EmitDefaultValue=false)]
        public int? TurnedOn { get; set; }

        /// <summary>
        /// 设备标示符
        /// </summary>
        /// <value>设备标示符</value>
        [DataMember(Name="bulb_identifier", EmitDefaultValue=false)]
        public string BulbIdentifier { get; set; }

        /// <summary>
        /// 设备的名字
        /// </summary>
        /// <value>设备的名字</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 墙面开关 ID
        /// </summary>
        /// <value>墙面开关 ID</value>
        [DataMember(Name="wall_switch_id", EmitDefaultValue=false)]
        public int? WallSwitchId { get; set; }

        /// <summary>
        /// 位于墙面开关的第几路
        /// </summary>
        /// <value>位于墙面开关的第几路</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public int? Channel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelBulb {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TurnedOn: ").Append(TurnedOn).Append("\n");
            sb.Append("  BulbIdentifier: ").Append(BulbIdentifier).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WallSwitchId: ").Append(WallSwitchId).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelBulb);
        }

        /// <summary>
        /// Returns true if ChannelBulb instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelBulb to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelBulb input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TurnedOn == input.TurnedOn ||
                    (this.TurnedOn != null &&
                    this.TurnedOn.Equals(input.TurnedOn))
                ) && 
                (
                    this.BulbIdentifier == input.BulbIdentifier ||
                    (this.BulbIdentifier != null &&
                    this.BulbIdentifier.Equals(input.BulbIdentifier))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.WallSwitchId == input.WallSwitchId ||
                    (this.WallSwitchId != null &&
                    this.WallSwitchId.Equals(input.WallSwitchId))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TurnedOn != null)
                    hashCode = hashCode * 59 + this.TurnedOn.GetHashCode();
                if (this.BulbIdentifier != null)
                    hashCode = hashCode * 59 + this.BulbIdentifier.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.WallSwitchId != null)
                    hashCode = hashCode * 59 + this.WallSwitchId.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
