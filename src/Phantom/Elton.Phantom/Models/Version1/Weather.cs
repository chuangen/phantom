/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 获取当前用户的家的当前天气
    /// </summary>
    [DataContract]
    public partial class Weather :  IEquatable<Weather>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Weather" /> class.
        /// </summary>
        /// <param name="Current">Current.</param>
        /// <param name="Today">Today.</param>
        public Weather(WeatherCurrent Current = default(WeatherCurrent), WeatherToday Today = default(WeatherToday))
        {
            this.Current = Current;
            this.Today = Today;
        }
        
        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name="current", EmitDefaultValue=false)]
        public WeatherCurrent Current { get; set; }

        /// <summary>
        /// Gets or Sets Today
        /// </summary>
        [DataMember(Name="today", EmitDefaultValue=false)]
        public WeatherToday Today { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Weather {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Today: ").Append(Today).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Weather);
        }

        /// <summary>
        /// Returns true if Weather instances are equal
        /// </summary>
        /// <param name="input">Instance of Weather to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Weather input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Current == input.Current ||
                    (this.Current != null &&
                    this.Current.Equals(input.Current))
                ) && 
                (
                    this.Today == input.Today ||
                    (this.Today != null &&
                    this.Today.Equals(input.Today))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Current != null)
                    hashCode = hashCode * 59 + this.Current.GetHashCode();
                if (this.Today != null)
                    hashCode = hashCode * 59 + this.Today.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
