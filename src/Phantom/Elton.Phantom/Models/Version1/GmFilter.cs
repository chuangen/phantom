/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 更换滤芯
    /// </summary>
    [DataContract]
    public partial class GmFilter :  IEquatable<GmFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GmFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GmFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GmFilter" /> class.
        /// </summary>
        /// <param name="Index">index (required).</param>
        /// <param name="Name">名称 (required).</param>
        /// <param name="Percent">percent (required).</param>
        public GmFilter(int? Index = default(int?), string Name = default(string), int? Percent = default(int?))
        {
            // to ensure "Index" is required (not null)
            if (Index == null)
            {
                throw new InvalidDataException("Index is a required property for GmFilter and cannot be null");
            }
            else
            {
                this.Index = Index;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for GmFilter and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Percent" is required (not null)
            if (Percent == null)
            {
                throw new InvalidDataException("Percent is a required property for GmFilter and cannot be null");
            }
            else
            {
                this.Percent = Percent;
            }
        }
        
        /// <summary>
        /// index
        /// </summary>
        /// <value>index</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        /// <value>名称</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// percent
        /// </summary>
        /// <value>percent</value>
        [DataMember(Name="percent", EmitDefaultValue=false)]
        public int? Percent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GmFilter {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GmFilter);
        }

        /// <summary>
        /// Returns true if GmFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of GmFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GmFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Percent == input.Percent ||
                    (this.Percent != null &&
                    this.Percent.Equals(input.Percent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Percent != null)
                    hashCode = hashCode * 59 + this.Percent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
