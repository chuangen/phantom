/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 获取当前用户的某个路由
    /// </summary>
    [DataContract]
    public partial class Router :  IEquatable<Router>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Router" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Router() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Router" /> class.
        /// </summary>
        /// <param name="Id">ID (required).</param>
        /// <param name="DeviceIdentifier">设备标识字符串 cf. 总则§2.3 (required).</param>
        /// <param name="TurnedOn">是否已开机 (required).</param>
        /// <param name="OwnDevice">是不是自己的设备 (required).</param>
        /// <param name="Name">设备的名字 (required).</param>
        /// <param name="DeviceIp">设备地址.</param>
        /// <param name="RouterId">路由ID.</param>
        /// <param name="HouseId">房子ID.</param>
        /// <param name="Connectivity">在线状态说明 cf. 总则§?.</param>
        /// <param name="AccumulatedUsageTime">累计使用时长.</param>
        /// <param name="CreatedAt">记录的创建日期.</param>
        /// <param name="UpdatedAt">记录的更新日期.</param>
        /// <param name="DeathQrCode">设备的死亡二维码，即删除后的设备会获得的一个二维码，           这样误删或是送人都可以用这个二维码，或是自己的设备坏了也可以用.</param>
        public Router(int? Id = default(int?), string DeviceIdentifier = default(string), int? TurnedOn = default(int?), bool? OwnDevice = default(bool?), string Name = default(string), int? DeviceIp = default(int?), int? RouterId = default(int?), int? HouseId = default(int?), string Connectivity = default(string), int? AccumulatedUsageTime = default(int?), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?), QrCode DeathQrCode = default(QrCode))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Router and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "DeviceIdentifier" is required (not null)
            if (DeviceIdentifier == null)
            {
                throw new InvalidDataException("DeviceIdentifier is a required property for Router and cannot be null");
            }
            else
            {
                this.DeviceIdentifier = DeviceIdentifier;
            }
            // to ensure "TurnedOn" is required (not null)
            if (TurnedOn == null)
            {
                throw new InvalidDataException("TurnedOn is a required property for Router and cannot be null");
            }
            else
            {
                this.TurnedOn = TurnedOn;
            }
            // to ensure "OwnDevice" is required (not null)
            if (OwnDevice == null)
            {
                throw new InvalidDataException("OwnDevice is a required property for Router and cannot be null");
            }
            else
            {
                this.OwnDevice = OwnDevice;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Router and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.DeviceIp = DeviceIp;
            this.RouterId = RouterId;
            this.HouseId = HouseId;
            this.Connectivity = Connectivity;
            this.AccumulatedUsageTime = AccumulatedUsageTime;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
            this.DeathQrCode = DeathQrCode;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 设备标识字符串 cf. 总则§2.3
        /// </summary>
        /// <value>设备标识字符串 cf. 总则§2.3</value>
        [DataMember(Name="device_identifier", EmitDefaultValue=false)]
        public string DeviceIdentifier { get; set; }

        /// <summary>
        /// 是否已开机
        /// </summary>
        /// <value>是否已开机</value>
        [DataMember(Name="turned_on", EmitDefaultValue=false)]
        public int? TurnedOn { get; set; }

        /// <summary>
        /// 是不是自己的设备
        /// </summary>
        /// <value>是不是自己的设备</value>
        [DataMember(Name="own_device?", EmitDefaultValue=false)]
        public bool? OwnDevice { get; set; }

        /// <summary>
        /// 设备的名字
        /// </summary>
        /// <value>设备的名字</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 设备地址
        /// </summary>
        /// <value>设备地址</value>
        [DataMember(Name="device_ip", EmitDefaultValue=false)]
        public int? DeviceIp { get; set; }

        /// <summary>
        /// 路由ID
        /// </summary>
        /// <value>路由ID</value>
        [DataMember(Name="router_id", EmitDefaultValue=false)]
        public int? RouterId { get; set; }

        /// <summary>
        /// 房子ID
        /// </summary>
        /// <value>房子ID</value>
        [DataMember(Name="house_id", EmitDefaultValue=false)]
        public int? HouseId { get; set; }

        /// <summary>
        /// 在线状态说明 cf. 总则§?
        /// </summary>
        /// <value>在线状态说明 cf. 总则§?</value>
        [DataMember(Name="connectivity", EmitDefaultValue=false)]
        public string Connectivity { get; set; }

        /// <summary>
        /// 累计使用时长
        /// </summary>
        /// <value>累计使用时长</value>
        [DataMember(Name="accumulated_usage_time", EmitDefaultValue=false)]
        public int? AccumulatedUsageTime { get; set; }

        /// <summary>
        /// 记录的创建日期
        /// </summary>
        /// <value>记录的创建日期</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// 记录的更新日期
        /// </summary>
        /// <value>记录的更新日期</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// 设备的死亡二维码，即删除后的设备会获得的一个二维码，           这样误删或是送人都可以用这个二维码，或是自己的设备坏了也可以用
        /// </summary>
        /// <value>设备的死亡二维码，即删除后的设备会获得的一个二维码，           这样误删或是送人都可以用这个二维码，或是自己的设备坏了也可以用</value>
        [DataMember(Name="death_qr_code", EmitDefaultValue=false)]
        public QrCode DeathQrCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Router {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceIdentifier: ").Append(DeviceIdentifier).Append("\n");
            sb.Append("  TurnedOn: ").Append(TurnedOn).Append("\n");
            sb.Append("  OwnDevice: ").Append(OwnDevice).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DeviceIp: ").Append(DeviceIp).Append("\n");
            sb.Append("  RouterId: ").Append(RouterId).Append("\n");
            sb.Append("  HouseId: ").Append(HouseId).Append("\n");
            sb.Append("  Connectivity: ").Append(Connectivity).Append("\n");
            sb.Append("  AccumulatedUsageTime: ").Append(AccumulatedUsageTime).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeathQrCode: ").Append(DeathQrCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Router);
        }

        /// <summary>
        /// Returns true if Router instances are equal
        /// </summary>
        /// <param name="input">Instance of Router to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Router input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceIdentifier == input.DeviceIdentifier ||
                    (this.DeviceIdentifier != null &&
                    this.DeviceIdentifier.Equals(input.DeviceIdentifier))
                ) && 
                (
                    this.TurnedOn == input.TurnedOn ||
                    (this.TurnedOn != null &&
                    this.TurnedOn.Equals(input.TurnedOn))
                ) && 
                (
                    this.OwnDevice == input.OwnDevice ||
                    (this.OwnDevice != null &&
                    this.OwnDevice.Equals(input.OwnDevice))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DeviceIp == input.DeviceIp ||
                    (this.DeviceIp != null &&
                    this.DeviceIp.Equals(input.DeviceIp))
                ) && 
                (
                    this.RouterId == input.RouterId ||
                    (this.RouterId != null &&
                    this.RouterId.Equals(input.RouterId))
                ) && 
                (
                    this.HouseId == input.HouseId ||
                    (this.HouseId != null &&
                    this.HouseId.Equals(input.HouseId))
                ) && 
                (
                    this.Connectivity == input.Connectivity ||
                    (this.Connectivity != null &&
                    this.Connectivity.Equals(input.Connectivity))
                ) && 
                (
                    this.AccumulatedUsageTime == input.AccumulatedUsageTime ||
                    (this.AccumulatedUsageTime != null &&
                    this.AccumulatedUsageTime.Equals(input.AccumulatedUsageTime))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.DeathQrCode == input.DeathQrCode ||
                    (this.DeathQrCode != null &&
                    this.DeathQrCode.Equals(input.DeathQrCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceIdentifier != null)
                    hashCode = hashCode * 59 + this.DeviceIdentifier.GetHashCode();
                if (this.TurnedOn != null)
                    hashCode = hashCode * 59 + this.TurnedOn.GetHashCode();
                if (this.OwnDevice != null)
                    hashCode = hashCode * 59 + this.OwnDevice.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DeviceIp != null)
                    hashCode = hashCode * 59 + this.DeviceIp.GetHashCode();
                if (this.RouterId != null)
                    hashCode = hashCode * 59 + this.RouterId.GetHashCode();
                if (this.HouseId != null)
                    hashCode = hashCode * 59 + this.HouseId.GetHashCode();
                if (this.Connectivity != null)
                    hashCode = hashCode * 59 + this.Connectivity.GetHashCode();
                if (this.AccumulatedUsageTime != null)
                    hashCode = hashCode * 59 + this.AccumulatedUsageTime.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.DeathQrCode != null)
                    hashCode = hashCode * 59 + this.DeathQrCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
