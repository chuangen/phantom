/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 修改单个区域信息
    /// </summary>
    [DataContract]
    public partial class Area :  IEquatable<Area>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Area" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Area() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Area" /> class.
        /// </summary>
        /// <param name="Id">id (required).</param>
        /// <param name="Name">区域名 (required).</param>
        /// <param name="HouseId">房间id (required).</param>
        /// <param name="Position">排序用的序号.</param>
        /// <param name="Icon">图标枚举值.</param>
        /// <param name="DeviceIdentifiers">设备标示数组.</param>
        /// <param name="ChannelBulbs">虚拟灯ID.</param>
        /// <param name="ScenarioIds">情景 ID 数组.</param>
        public Area(int? Id = default(int?), string Name = default(string), int? HouseId = default(int?), int? Position = default(int?), int? Icon = default(int?), List<string> DeviceIdentifiers = default(List<string>), List<ChannelBulb> ChannelBulbs = default(List<ChannelBulb>), List<int> ScenarioIds = default(List<int>))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Area and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Area and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "HouseId" is required (not null)
            if (HouseId == null)
            {
                throw new InvalidDataException("HouseId is a required property for Area and cannot be null");
            }
            else
            {
                this.HouseId = HouseId;
            }
            this.Position = Position;
            this.Icon = Icon;
            this.DeviceIdentifiers = DeviceIdentifiers;
            this.ChannelBulbs = ChannelBulbs;
            this.ScenarioIds = ScenarioIds;
        }
        
        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 区域名
        /// </summary>
        /// <value>区域名</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 房间id
        /// </summary>
        /// <value>房间id</value>
        [DataMember(Name="house_id", EmitDefaultValue=false)]
        public int? HouseId { get; set; }

        /// <summary>
        /// 排序用的序号
        /// </summary>
        /// <value>排序用的序号</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// 图标枚举值
        /// </summary>
        /// <value>图标枚举值</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public int? Icon { get; set; }

        /// <summary>
        /// 设备标示数组
        /// </summary>
        /// <value>设备标示数组</value>
        [DataMember(Name="device_identifiers", EmitDefaultValue=false)]
        public List<string> DeviceIdentifiers { get; set; }

        /// <summary>
        /// 虚拟灯ID
        /// </summary>
        /// <value>虚拟灯ID</value>
        [DataMember(Name="channel_bulbs", EmitDefaultValue=false)]
        public List<ChannelBulb> ChannelBulbs { get; set; }

        /// <summary>
        /// 情景 ID 数组
        /// </summary>
        /// <value>情景 ID 数组</value>
        [DataMember(Name="scenario_ids", EmitDefaultValue=false)]
        public List<int> ScenarioIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Area {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HouseId: ").Append(HouseId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  DeviceIdentifiers: ").Append(DeviceIdentifiers).Append("\n");
            sb.Append("  ChannelBulbs: ").Append(ChannelBulbs).Append("\n");
            sb.Append("  ScenarioIds: ").Append(ScenarioIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Area);
        }

        /// <summary>
        /// Returns true if Area instances are equal
        /// </summary>
        /// <param name="input">Instance of Area to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Area input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HouseId == input.HouseId ||
                    (this.HouseId != null &&
                    this.HouseId.Equals(input.HouseId))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.DeviceIdentifiers == input.DeviceIdentifiers ||
                    this.DeviceIdentifiers != null &&
                    this.DeviceIdentifiers.SequenceEqual(input.DeviceIdentifiers)
                ) && 
                (
                    this.ChannelBulbs == input.ChannelBulbs ||
                    this.ChannelBulbs != null &&
                    this.ChannelBulbs.SequenceEqual(input.ChannelBulbs)
                ) && 
                (
                    this.ScenarioIds == input.ScenarioIds ||
                    this.ScenarioIds != null &&
                    this.ScenarioIds.SequenceEqual(input.ScenarioIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HouseId != null)
                    hashCode = hashCode * 59 + this.HouseId.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.DeviceIdentifiers != null)
                    hashCode = hashCode * 59 + this.DeviceIdentifiers.GetHashCode();
                if (this.ChannelBulbs != null)
                    hashCode = hashCode * 59 + this.ChannelBulbs.GetHashCode();
                if (this.ScenarioIds != null)
                    hashCode = hashCode * 59 + this.ScenarioIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
