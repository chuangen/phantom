/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 房间里加入某些或某个设备
    /// </summary>
    [DataContract]
    public partial class Device :  IEquatable<Device>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Device() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="Id">id.</param>
        /// <param name="DeviceIdentifier">设备标识字符串 cf. 总则§2.3 (required).</param>
        /// <param name="_Virtual">是否为虚拟灯 (required).</param>
        /// <param name="Brightness">亮度 (required).</param>
        /// <param name="Hue">色温 (required).</param>
        /// <param name="TurnedOn">是否已开机 (required).</param>
        /// <param name="OwnDevice">是不是自己的设备 (required).</param>
        /// <param name="Name">设备的名字 (required).</param>
        /// <param name="ApiPath">api路径 (required).</param>
        /// <param name="HouseId">房间ID.</param>
        /// <param name="HouseName">房间名字.</param>
        /// <param name="DeviceIp">设备地址.</param>
        /// <param name="DevId">插控儿设备序列号.</param>
        /// <param name="RouterId">路由ID.</param>
        /// <param name="Connectivity">在线状态说明 cf. 总则§?.</param>
        /// <param name="AccumulatedUsageTime">累计使用时长.</param>
        /// <param name="CreatedAt">记录的创建日期.</param>
        /// <param name="UpdatedAt">记录的更新日期.</param>
        /// <param name="DeathQrCode">设备的死亡二维码，即删除后的设备会获得的一个二维码，这样误删或是送人都可以用这个二维码，或是自己的设备坏了也可以用.</param>
        /// <param name="IrdaType">插控红外类型(ac为空调，tv为电视，hub为插座).</param>
        /// <param name="Vid">厂商标识符 (required).</param>
        /// <param name="Pid">设备标识符 (required).</param>
        /// <param name="AlertStatus">门磁的报警状态 (required).</param>
        /// <param name="AliasBulbGroupId">是否为灯组 (required).</param>
        /// <param name="DeviceType">设备类型 (required).</param>
        /// <param name="DeviceCategory">设备类别 (required).</param>
        /// <param name="DeviceTypeWords">中文设备类型 (required).</param>
        /// <param name="IsOpen">门磁是否打开.</param>
        /// <param name="Active">是否有人.</param>
        /// <param name="Status">空调或窗帘状态.</param>
        /// <param name="Reverse">窗帘是否反转.</param>
        public Device(int? Id = default(int?), string DeviceIdentifier = default(string), bool? _Virtual = default(bool?), float? Brightness = default(float?), float? Hue = default(float?), int? TurnedOn = default(int?), bool? OwnDevice = default(bool?), string Name = default(string), string ApiPath = default(string), int? HouseId = default(int?), int? HouseName = default(int?), int? DeviceIp = default(int?), string DevId = default(string), int? RouterId = default(int?), string Connectivity = default(string), int? AccumulatedUsageTime = default(int?), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?), QrCode DeathQrCode = default(QrCode), string IrdaType = default(string), int? Vid = default(int?), int? Pid = default(int?), int? AlertStatus = default(int?), int? AliasBulbGroupId = default(int?), string DeviceType = default(string), string DeviceCategory = default(string), string DeviceTypeWords = default(string), bool? IsOpen = default(bool?), bool? Active = default(bool?), Object Status = default(Object), bool? Reverse = default(bool?))
        {
            // to ensure "DeviceIdentifier" is required (not null)
            if (DeviceIdentifier == null)
            {
                throw new InvalidDataException("DeviceIdentifier is a required property for Device and cannot be null");
            }
            else
            {
                this.DeviceIdentifier = DeviceIdentifier;
            }
            // to ensure "_Virtual" is required (not null)
            if (_Virtual == null)
            {
                throw new InvalidDataException("_Virtual is a required property for Device and cannot be null");
            }
            else
            {
                this._Virtual = _Virtual;
            }
            // to ensure "Brightness" is required (not null)
            if (Brightness == null)
            {
                throw new InvalidDataException("Brightness is a required property for Device and cannot be null");
            }
            else
            {
                this.Brightness = Brightness;
            }
            // to ensure "Hue" is required (not null)
            if (Hue == null)
            {
                throw new InvalidDataException("Hue is a required property for Device and cannot be null");
            }
            else
            {
                this.Hue = Hue;
            }
            // to ensure "TurnedOn" is required (not null)
            if (TurnedOn == null)
            {
                throw new InvalidDataException("TurnedOn is a required property for Device and cannot be null");
            }
            else
            {
                this.TurnedOn = TurnedOn;
            }
            // to ensure "OwnDevice" is required (not null)
            if (OwnDevice == null)
            {
                throw new InvalidDataException("OwnDevice is a required property for Device and cannot be null");
            }
            else
            {
                this.OwnDevice = OwnDevice;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Device and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "ApiPath" is required (not null)
            if (ApiPath == null)
            {
                throw new InvalidDataException("ApiPath is a required property for Device and cannot be null");
            }
            else
            {
                this.ApiPath = ApiPath;
            }
            // to ensure "Vid" is required (not null)
            if (Vid == null)
            {
                throw new InvalidDataException("Vid is a required property for Device and cannot be null");
            }
            else
            {
                this.Vid = Vid;
            }
            // to ensure "Pid" is required (not null)
            if (Pid == null)
            {
                throw new InvalidDataException("Pid is a required property for Device and cannot be null");
            }
            else
            {
                this.Pid = Pid;
            }
            // to ensure "AlertStatus" is required (not null)
            if (AlertStatus == null)
            {
                throw new InvalidDataException("AlertStatus is a required property for Device and cannot be null");
            }
            else
            {
                this.AlertStatus = AlertStatus;
            }
            // to ensure "AliasBulbGroupId" is required (not null)
            if (AliasBulbGroupId == null)
            {
                throw new InvalidDataException("AliasBulbGroupId is a required property for Device and cannot be null");
            }
            else
            {
                this.AliasBulbGroupId = AliasBulbGroupId;
            }
            // to ensure "DeviceType" is required (not null)
            if (DeviceType == null)
            {
                throw new InvalidDataException("DeviceType is a required property for Device and cannot be null");
            }
            else
            {
                this.DeviceType = DeviceType;
            }
            // to ensure "DeviceCategory" is required (not null)
            if (DeviceCategory == null)
            {
                throw new InvalidDataException("DeviceCategory is a required property for Device and cannot be null");
            }
            else
            {
                this.DeviceCategory = DeviceCategory;
            }
            // to ensure "DeviceTypeWords" is required (not null)
            if (DeviceTypeWords == null)
            {
                throw new InvalidDataException("DeviceTypeWords is a required property for Device and cannot be null");
            }
            else
            {
                this.DeviceTypeWords = DeviceTypeWords;
            }
            this.Id = Id;
            this.HouseId = HouseId;
            this.HouseName = HouseName;
            this.DeviceIp = DeviceIp;
            this.DevId = DevId;
            this.RouterId = RouterId;
            this.Connectivity = Connectivity;
            this.AccumulatedUsageTime = AccumulatedUsageTime;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
            this.DeathQrCode = DeathQrCode;
            this.IrdaType = IrdaType;
            this.IsOpen = IsOpen;
            this.Active = Active;
            this.Status = Status;
            this.Reverse = Reverse;
        }
        
        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 设备标识字符串 cf. 总则§2.3
        /// </summary>
        /// <value>设备标识字符串 cf. 总则§2.3</value>
        [DataMember(Name="device_identifier", EmitDefaultValue=false)]
        public string DeviceIdentifier { get; set; }

        /// <summary>
        /// 是否为虚拟灯
        /// </summary>
        /// <value>是否为虚拟灯</value>
        [DataMember(Name="virtual?", EmitDefaultValue=false)]
        public bool? _Virtual { get; set; }

        /// <summary>
        /// 亮度
        /// </summary>
        /// <value>亮度</value>
        [DataMember(Name="brightness", EmitDefaultValue=false)]
        public float? Brightness { get; set; }

        /// <summary>
        /// 色温
        /// </summary>
        /// <value>色温</value>
        [DataMember(Name="hue", EmitDefaultValue=false)]
        public float? Hue { get; set; }

        /// <summary>
        /// 是否已开机
        /// </summary>
        /// <value>是否已开机</value>
        [DataMember(Name="turned_on", EmitDefaultValue=false)]
        public int? TurnedOn { get; set; }

        /// <summary>
        /// 是不是自己的设备
        /// </summary>
        /// <value>是不是自己的设备</value>
        [DataMember(Name="own_device?", EmitDefaultValue=false)]
        public bool? OwnDevice { get; set; }

        /// <summary>
        /// 设备的名字
        /// </summary>
        /// <value>设备的名字</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// api路径
        /// </summary>
        /// <value>api路径</value>
        [DataMember(Name="api_path", EmitDefaultValue=false)]
        public string ApiPath { get; set; }

        /// <summary>
        /// 房间ID
        /// </summary>
        /// <value>房间ID</value>
        [DataMember(Name="house_id", EmitDefaultValue=false)]
        public int? HouseId { get; set; }

        /// <summary>
        /// 房间名字
        /// </summary>
        /// <value>房间名字</value>
        [DataMember(Name="house_name", EmitDefaultValue=false)]
        public int? HouseName { get; set; }

        /// <summary>
        /// 设备地址
        /// </summary>
        /// <value>设备地址</value>
        [DataMember(Name="device_ip", EmitDefaultValue=false)]
        public int? DeviceIp { get; set; }

        /// <summary>
        /// 插控儿设备序列号
        /// </summary>
        /// <value>插控儿设备序列号</value>
        [DataMember(Name="dev_id", EmitDefaultValue=false)]
        public string DevId { get; set; }

        /// <summary>
        /// 路由ID
        /// </summary>
        /// <value>路由ID</value>
        [DataMember(Name="router_id", EmitDefaultValue=false)]
        public int? RouterId { get; set; }

        /// <summary>
        /// 在线状态说明 cf. 总则§?
        /// </summary>
        /// <value>在线状态说明 cf. 总则§?</value>
        [DataMember(Name="connectivity", EmitDefaultValue=false)]
        public string Connectivity { get; set; }

        /// <summary>
        /// 累计使用时长
        /// </summary>
        /// <value>累计使用时长</value>
        [DataMember(Name="accumulated_usage_time", EmitDefaultValue=false)]
        public int? AccumulatedUsageTime { get; set; }

        /// <summary>
        /// 记录的创建日期
        /// </summary>
        /// <value>记录的创建日期</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// 记录的更新日期
        /// </summary>
        /// <value>记录的更新日期</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// 设备的死亡二维码，即删除后的设备会获得的一个二维码，这样误删或是送人都可以用这个二维码，或是自己的设备坏了也可以用
        /// </summary>
        /// <value>设备的死亡二维码，即删除后的设备会获得的一个二维码，这样误删或是送人都可以用这个二维码，或是自己的设备坏了也可以用</value>
        [DataMember(Name="death_qr_code", EmitDefaultValue=false)]
        public QrCode DeathQrCode { get; set; }

        /// <summary>
        /// 插控红外类型(ac为空调，tv为电视，hub为插座)
        /// </summary>
        /// <value>插控红外类型(ac为空调，tv为电视，hub为插座)</value>
        [DataMember(Name="irda_type", EmitDefaultValue=false)]
        public string IrdaType { get; set; }

        /// <summary>
        /// 厂商标识符
        /// </summary>
        /// <value>厂商标识符</value>
        [DataMember(Name="vid", EmitDefaultValue=false)]
        public int? Vid { get; set; }

        /// <summary>
        /// 设备标识符
        /// </summary>
        /// <value>设备标识符</value>
        [DataMember(Name="pid", EmitDefaultValue=false)]
        public int? Pid { get; set; }

        /// <summary>
        /// 门磁的报警状态
        /// </summary>
        /// <value>门磁的报警状态</value>
        [DataMember(Name="alert_status", EmitDefaultValue=false)]
        public int? AlertStatus { get; set; }

        /// <summary>
        /// 是否为灯组
        /// </summary>
        /// <value>是否为灯组</value>
        [DataMember(Name="alias_bulb_group_id", EmitDefaultValue=false)]
        public int? AliasBulbGroupId { get; set; }

        /// <summary>
        /// 设备类型
        /// </summary>
        /// <value>设备类型</value>
        [DataMember(Name="device_type", EmitDefaultValue=false)]
        public string DeviceType { get; set; }

        /// <summary>
        /// 设备类别
        /// </summary>
        /// <value>设备类别</value>
        [DataMember(Name="device_category", EmitDefaultValue=false)]
        public string DeviceCategory { get; set; }

        /// <summary>
        /// 中文设备类型
        /// </summary>
        /// <value>中文设备类型</value>
        [DataMember(Name="device_type_words", EmitDefaultValue=false)]
        public string DeviceTypeWords { get; set; }

        /// <summary>
        /// 门磁是否打开
        /// </summary>
        /// <value>门磁是否打开</value>
        [DataMember(Name="is_open", EmitDefaultValue=false)]
        public bool? IsOpen { get; set; }

        /// <summary>
        /// 是否有人
        /// </summary>
        /// <value>是否有人</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// 空调或窗帘状态
        /// </summary>
        /// <value>空调或窗帘状态</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public Object Status { get; set; }

        /// <summary>
        /// 窗帘是否反转
        /// </summary>
        /// <value>窗帘是否反转</value>
        [DataMember(Name="reverse", EmitDefaultValue=false)]
        public bool? Reverse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceIdentifier: ").Append(DeviceIdentifier).Append("\n");
            sb.Append("  _Virtual: ").Append(_Virtual).Append("\n");
            sb.Append("  Brightness: ").Append(Brightness).Append("\n");
            sb.Append("  Hue: ").Append(Hue).Append("\n");
            sb.Append("  TurnedOn: ").Append(TurnedOn).Append("\n");
            sb.Append("  OwnDevice: ").Append(OwnDevice).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApiPath: ").Append(ApiPath).Append("\n");
            sb.Append("  HouseId: ").Append(HouseId).Append("\n");
            sb.Append("  HouseName: ").Append(HouseName).Append("\n");
            sb.Append("  DeviceIp: ").Append(DeviceIp).Append("\n");
            sb.Append("  DevId: ").Append(DevId).Append("\n");
            sb.Append("  RouterId: ").Append(RouterId).Append("\n");
            sb.Append("  Connectivity: ").Append(Connectivity).Append("\n");
            sb.Append("  AccumulatedUsageTime: ").Append(AccumulatedUsageTime).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeathQrCode: ").Append(DeathQrCode).Append("\n");
            sb.Append("  IrdaType: ").Append(IrdaType).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  AlertStatus: ").Append(AlertStatus).Append("\n");
            sb.Append("  AliasBulbGroupId: ").Append(AliasBulbGroupId).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  DeviceCategory: ").Append(DeviceCategory).Append("\n");
            sb.Append("  DeviceTypeWords: ").Append(DeviceTypeWords).Append("\n");
            sb.Append("  IsOpen: ").Append(IsOpen).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reverse: ").Append(Reverse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Device);
        }

        /// <summary>
        /// Returns true if Device instances are equal
        /// </summary>
        /// <param name="input">Instance of Device to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Device input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceIdentifier == input.DeviceIdentifier ||
                    (this.DeviceIdentifier != null &&
                    this.DeviceIdentifier.Equals(input.DeviceIdentifier))
                ) && 
                (
                    this._Virtual == input._Virtual ||
                    (this._Virtual != null &&
                    this._Virtual.Equals(input._Virtual))
                ) && 
                (
                    this.Brightness == input.Brightness ||
                    (this.Brightness != null &&
                    this.Brightness.Equals(input.Brightness))
                ) && 
                (
                    this.Hue == input.Hue ||
                    (this.Hue != null &&
                    this.Hue.Equals(input.Hue))
                ) && 
                (
                    this.TurnedOn == input.TurnedOn ||
                    (this.TurnedOn != null &&
                    this.TurnedOn.Equals(input.TurnedOn))
                ) && 
                (
                    this.OwnDevice == input.OwnDevice ||
                    (this.OwnDevice != null &&
                    this.OwnDevice.Equals(input.OwnDevice))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ApiPath == input.ApiPath ||
                    (this.ApiPath != null &&
                    this.ApiPath.Equals(input.ApiPath))
                ) && 
                (
                    this.HouseId == input.HouseId ||
                    (this.HouseId != null &&
                    this.HouseId.Equals(input.HouseId))
                ) && 
                (
                    this.HouseName == input.HouseName ||
                    (this.HouseName != null &&
                    this.HouseName.Equals(input.HouseName))
                ) && 
                (
                    this.DeviceIp == input.DeviceIp ||
                    (this.DeviceIp != null &&
                    this.DeviceIp.Equals(input.DeviceIp))
                ) && 
                (
                    this.DevId == input.DevId ||
                    (this.DevId != null &&
                    this.DevId.Equals(input.DevId))
                ) && 
                (
                    this.RouterId == input.RouterId ||
                    (this.RouterId != null &&
                    this.RouterId.Equals(input.RouterId))
                ) && 
                (
                    this.Connectivity == input.Connectivity ||
                    (this.Connectivity != null &&
                    this.Connectivity.Equals(input.Connectivity))
                ) && 
                (
                    this.AccumulatedUsageTime == input.AccumulatedUsageTime ||
                    (this.AccumulatedUsageTime != null &&
                    this.AccumulatedUsageTime.Equals(input.AccumulatedUsageTime))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.DeathQrCode == input.DeathQrCode ||
                    (this.DeathQrCode != null &&
                    this.DeathQrCode.Equals(input.DeathQrCode))
                ) && 
                (
                    this.IrdaType == input.IrdaType ||
                    (this.IrdaType != null &&
                    this.IrdaType.Equals(input.IrdaType))
                ) && 
                (
                    this.Vid == input.Vid ||
                    (this.Vid != null &&
                    this.Vid.Equals(input.Vid))
                ) && 
                (
                    this.Pid == input.Pid ||
                    (this.Pid != null &&
                    this.Pid.Equals(input.Pid))
                ) && 
                (
                    this.AlertStatus == input.AlertStatus ||
                    (this.AlertStatus != null &&
                    this.AlertStatus.Equals(input.AlertStatus))
                ) && 
                (
                    this.AliasBulbGroupId == input.AliasBulbGroupId ||
                    (this.AliasBulbGroupId != null &&
                    this.AliasBulbGroupId.Equals(input.AliasBulbGroupId))
                ) && 
                (
                    this.DeviceType == input.DeviceType ||
                    (this.DeviceType != null &&
                    this.DeviceType.Equals(input.DeviceType))
                ) && 
                (
                    this.DeviceCategory == input.DeviceCategory ||
                    (this.DeviceCategory != null &&
                    this.DeviceCategory.Equals(input.DeviceCategory))
                ) && 
                (
                    this.DeviceTypeWords == input.DeviceTypeWords ||
                    (this.DeviceTypeWords != null &&
                    this.DeviceTypeWords.Equals(input.DeviceTypeWords))
                ) && 
                (
                    this.IsOpen == input.IsOpen ||
                    (this.IsOpen != null &&
                    this.IsOpen.Equals(input.IsOpen))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Reverse == input.Reverse ||
                    (this.Reverse != null &&
                    this.Reverse.Equals(input.Reverse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceIdentifier != null)
                    hashCode = hashCode * 59 + this.DeviceIdentifier.GetHashCode();
                if (this._Virtual != null)
                    hashCode = hashCode * 59 + this._Virtual.GetHashCode();
                if (this.Brightness != null)
                    hashCode = hashCode * 59 + this.Brightness.GetHashCode();
                if (this.Hue != null)
                    hashCode = hashCode * 59 + this.Hue.GetHashCode();
                if (this.TurnedOn != null)
                    hashCode = hashCode * 59 + this.TurnedOn.GetHashCode();
                if (this.OwnDevice != null)
                    hashCode = hashCode * 59 + this.OwnDevice.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ApiPath != null)
                    hashCode = hashCode * 59 + this.ApiPath.GetHashCode();
                if (this.HouseId != null)
                    hashCode = hashCode * 59 + this.HouseId.GetHashCode();
                if (this.HouseName != null)
                    hashCode = hashCode * 59 + this.HouseName.GetHashCode();
                if (this.DeviceIp != null)
                    hashCode = hashCode * 59 + this.DeviceIp.GetHashCode();
                if (this.DevId != null)
                    hashCode = hashCode * 59 + this.DevId.GetHashCode();
                if (this.RouterId != null)
                    hashCode = hashCode * 59 + this.RouterId.GetHashCode();
                if (this.Connectivity != null)
                    hashCode = hashCode * 59 + this.Connectivity.GetHashCode();
                if (this.AccumulatedUsageTime != null)
                    hashCode = hashCode * 59 + this.AccumulatedUsageTime.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.DeathQrCode != null)
                    hashCode = hashCode * 59 + this.DeathQrCode.GetHashCode();
                if (this.IrdaType != null)
                    hashCode = hashCode * 59 + this.IrdaType.GetHashCode();
                if (this.Vid != null)
                    hashCode = hashCode * 59 + this.Vid.GetHashCode();
                if (this.Pid != null)
                    hashCode = hashCode * 59 + this.Pid.GetHashCode();
                if (this.AlertStatus != null)
                    hashCode = hashCode * 59 + this.AlertStatus.GetHashCode();
                if (this.AliasBulbGroupId != null)
                    hashCode = hashCode * 59 + this.AliasBulbGroupId.GetHashCode();
                if (this.DeviceType != null)
                    hashCode = hashCode * 59 + this.DeviceType.GetHashCode();
                if (this.DeviceCategory != null)
                    hashCode = hashCode * 59 + this.DeviceCategory.GetHashCode();
                if (this.DeviceTypeWords != null)
                    hashCode = hashCode * 59 + this.DeviceTypeWords.GetHashCode();
                if (this.IsOpen != null)
                    hashCode = hashCode * 59 + this.IsOpen.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Reverse != null)
                    hashCode = hashCode * 59 + this.Reverse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
