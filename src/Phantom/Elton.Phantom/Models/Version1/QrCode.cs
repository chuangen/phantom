/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 根据二维码获取设备信息
    /// </summary>
    [DataContract]
    public partial class QrCode :  IEquatable<QrCode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QrCode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QrCode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QrCode" /> class.
        /// </summary>
        /// <param name="Id">二维码的ID (required).</param>
        /// <param name="Code">二维码的码串 (required).</param>
        /// <param name="CannotUsed">二维码是不是已经不能使用了，这可能是因为二维码已经添加过或属于别人 (required).</param>
        /// <param name="DeviceType">二维码对应的设备类型 (required).</param>
        /// <param name="DeviceInfo">二维码直接贴着的单件设备信息.</param>
        /// <param name="DeviceInfos">二维码贴着的同盒单件设备信息集.</param>
        /// <param name="CreatedAt">记录的创建日期.</param>
        /// <param name="UpdatedAt">记录的更新日期.</param>
        public QrCode(int? Id = default(int?), string Code = default(string), bool? CannotUsed = default(bool?), string DeviceType = default(string), DeviceInfo DeviceInfo = default(DeviceInfo), DeviceInfo DeviceInfos = default(DeviceInfo), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for QrCode and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for QrCode and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "CannotUsed" is required (not null)
            if (CannotUsed == null)
            {
                throw new InvalidDataException("CannotUsed is a required property for QrCode and cannot be null");
            }
            else
            {
                this.CannotUsed = CannotUsed;
            }
            // to ensure "DeviceType" is required (not null)
            if (DeviceType == null)
            {
                throw new InvalidDataException("DeviceType is a required property for QrCode and cannot be null");
            }
            else
            {
                this.DeviceType = DeviceType;
            }
            this.DeviceInfo = DeviceInfo;
            this.DeviceInfos = DeviceInfos;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// 二维码的ID
        /// </summary>
        /// <value>二维码的ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 二维码的码串
        /// </summary>
        /// <value>二维码的码串</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// 二维码是不是已经不能使用了，这可能是因为二维码已经添加过或属于别人
        /// </summary>
        /// <value>二维码是不是已经不能使用了，这可能是因为二维码已经添加过或属于别人</value>
        [DataMember(Name="cannot_used?", EmitDefaultValue=false)]
        public bool? CannotUsed { get; set; }

        /// <summary>
        /// 二维码对应的设备类型
        /// </summary>
        /// <value>二维码对应的设备类型</value>
        [DataMember(Name="device_type", EmitDefaultValue=false)]
        public string DeviceType { get; set; }

        /// <summary>
        /// 二维码直接贴着的单件设备信息
        /// </summary>
        /// <value>二维码直接贴着的单件设备信息</value>
        [DataMember(Name="device_info", EmitDefaultValue=false)]
        public DeviceInfo DeviceInfo { get; set; }

        /// <summary>
        /// 二维码贴着的同盒单件设备信息集
        /// </summary>
        /// <value>二维码贴着的同盒单件设备信息集</value>
        [DataMember(Name="device_infos", EmitDefaultValue=false)]
        public DeviceInfo DeviceInfos { get; set; }

        /// <summary>
        /// 记录的创建日期
        /// </summary>
        /// <value>记录的创建日期</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// 记录的更新日期
        /// </summary>
        /// <value>记录的更新日期</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QrCode {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CannotUsed: ").Append(CannotUsed).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  DeviceInfo: ").Append(DeviceInfo).Append("\n");
            sb.Append("  DeviceInfos: ").Append(DeviceInfos).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QrCode);
        }

        /// <summary>
        /// Returns true if QrCode instances are equal
        /// </summary>
        /// <param name="input">Instance of QrCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QrCode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CannotUsed == input.CannotUsed ||
                    (this.CannotUsed != null &&
                    this.CannotUsed.Equals(input.CannotUsed))
                ) && 
                (
                    this.DeviceType == input.DeviceType ||
                    (this.DeviceType != null &&
                    this.DeviceType.Equals(input.DeviceType))
                ) && 
                (
                    this.DeviceInfo == input.DeviceInfo ||
                    (this.DeviceInfo != null &&
                    this.DeviceInfo.Equals(input.DeviceInfo))
                ) && 
                (
                    this.DeviceInfos == input.DeviceInfos ||
                    (this.DeviceInfos != null &&
                    this.DeviceInfos.Equals(input.DeviceInfos))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CannotUsed != null)
                    hashCode = hashCode * 59 + this.CannotUsed.GetHashCode();
                if (this.DeviceType != null)
                    hashCode = hashCode * 59 + this.DeviceType.GetHashCode();
                if (this.DeviceInfo != null)
                    hashCode = hashCode * 59 + this.DeviceInfo.GetHashCode();
                if (this.DeviceInfos != null)
                    hashCode = hashCode * 59 + this.DeviceInfos.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
