/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 窗帘功能开关
    /// </summary>
    [DataContract]
    public partial class Curtain :  IEquatable<Curtain>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Curtain" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Curtain() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Curtain" /> class.
        /// </summary>
        /// <param name="DeviceIdentifier">设备标识字符串 cf. 总则§2.3 (required).</param>
        /// <param name="Id">ID (required).</param>
        /// <param name="Name">窗帘的名字 (required).</param>
        /// <param name="HouseId">房间ID.</param>
        /// <param name="Percent">关闭的百分比.</param>
        /// <param name="PullAndLaunch">手拉启动开启状态：开启手拉启动(true)；关闭手拉启动(false).</param>
        /// <param name="LimitSet">是否完成行程设置.</param>
        /// <param name="Direction">窗帘当前运行方向：stop/up/down/error stop/unknown error.</param>
        /// <param name="Reverse">是否标记反转.</param>
        /// <param name="DeviceCategory">设备类别.</param>
        /// <param name="Capability">Capability.</param>
        /// <param name="Status">Status.</param>
        public Curtain(string DeviceIdentifier = default(string), int? Id = default(int?), string Name = default(string), int? HouseId = default(int?), int? Percent = default(int?), bool? PullAndLaunch = default(bool?), bool? LimitSet = default(bool?), bool? Direction = default(bool?), bool? Reverse = default(bool?), string DeviceCategory = default(string), string Capability = default(string), string Status = default(string))
        {
            // to ensure "DeviceIdentifier" is required (not null)
            if (DeviceIdentifier == null)
            {
                throw new InvalidDataException("DeviceIdentifier is a required property for Curtain and cannot be null");
            }
            else
            {
                this.DeviceIdentifier = DeviceIdentifier;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Curtain and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Curtain and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.HouseId = HouseId;
            this.Percent = Percent;
            this.PullAndLaunch = PullAndLaunch;
            this.LimitSet = LimitSet;
            this.Direction = Direction;
            this.Reverse = Reverse;
            this.DeviceCategory = DeviceCategory;
            this.Capability = Capability;
            this.Status = Status;
        }
        
        /// <summary>
        /// 设备标识字符串 cf. 总则§2.3
        /// </summary>
        /// <value>设备标识字符串 cf. 总则§2.3</value>
        [DataMember(Name="device_identifier", EmitDefaultValue=false)]
        public string DeviceIdentifier { get; set; }

        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 窗帘的名字
        /// </summary>
        /// <value>窗帘的名字</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 房间ID
        /// </summary>
        /// <value>房间ID</value>
        [DataMember(Name="house_id", EmitDefaultValue=false)]
        public int? HouseId { get; set; }

        /// <summary>
        /// 关闭的百分比
        /// </summary>
        /// <value>关闭的百分比</value>
        [DataMember(Name="percent", EmitDefaultValue=false)]
        public int? Percent { get; set; }

        /// <summary>
        /// 手拉启动开启状态：开启手拉启动(true)；关闭手拉启动(false)
        /// </summary>
        /// <value>手拉启动开启状态：开启手拉启动(true)；关闭手拉启动(false)</value>
        [DataMember(Name="pull_and_launch", EmitDefaultValue=false)]
        public bool? PullAndLaunch { get; set; }

        /// <summary>
        /// 是否完成行程设置
        /// </summary>
        /// <value>是否完成行程设置</value>
        [DataMember(Name="limit_set", EmitDefaultValue=false)]
        public bool? LimitSet { get; set; }

        /// <summary>
        /// 窗帘当前运行方向：stop/up/down/error stop/unknown error
        /// </summary>
        /// <value>窗帘当前运行方向：stop/up/down/error stop/unknown error</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public bool? Direction { get; set; }

        /// <summary>
        /// 是否标记反转
        /// </summary>
        /// <value>是否标记反转</value>
        [DataMember(Name="reverse", EmitDefaultValue=false)]
        public bool? Reverse { get; set; }

        /// <summary>
        /// 设备类别
        /// </summary>
        /// <value>设备类别</value>
        [DataMember(Name="device_category", EmitDefaultValue=false)]
        public string DeviceCategory { get; set; }

        /// <summary>
        /// Gets or Sets Capability
        /// </summary>
        [DataMember(Name="capability", EmitDefaultValue=false)]
        public string Capability { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Curtain {\n");
            sb.Append("  DeviceIdentifier: ").Append(DeviceIdentifier).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HouseId: ").Append(HouseId).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  PullAndLaunch: ").Append(PullAndLaunch).Append("\n");
            sb.Append("  LimitSet: ").Append(LimitSet).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Reverse: ").Append(Reverse).Append("\n");
            sb.Append("  DeviceCategory: ").Append(DeviceCategory).Append("\n");
            sb.Append("  Capability: ").Append(Capability).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Curtain);
        }

        /// <summary>
        /// Returns true if Curtain instances are equal
        /// </summary>
        /// <param name="input">Instance of Curtain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Curtain input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeviceIdentifier == input.DeviceIdentifier ||
                    (this.DeviceIdentifier != null &&
                    this.DeviceIdentifier.Equals(input.DeviceIdentifier))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HouseId == input.HouseId ||
                    (this.HouseId != null &&
                    this.HouseId.Equals(input.HouseId))
                ) && 
                (
                    this.Percent == input.Percent ||
                    (this.Percent != null &&
                    this.Percent.Equals(input.Percent))
                ) && 
                (
                    this.PullAndLaunch == input.PullAndLaunch ||
                    (this.PullAndLaunch != null &&
                    this.PullAndLaunch.Equals(input.PullAndLaunch))
                ) && 
                (
                    this.LimitSet == input.LimitSet ||
                    (this.LimitSet != null &&
                    this.LimitSet.Equals(input.LimitSet))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Reverse == input.Reverse ||
                    (this.Reverse != null &&
                    this.Reverse.Equals(input.Reverse))
                ) && 
                (
                    this.DeviceCategory == input.DeviceCategory ||
                    (this.DeviceCategory != null &&
                    this.DeviceCategory.Equals(input.DeviceCategory))
                ) && 
                (
                    this.Capability == input.Capability ||
                    (this.Capability != null &&
                    this.Capability.Equals(input.Capability))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeviceIdentifier != null)
                    hashCode = hashCode * 59 + this.DeviceIdentifier.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HouseId != null)
                    hashCode = hashCode * 59 + this.HouseId.GetHashCode();
                if (this.Percent != null)
                    hashCode = hashCode * 59 + this.Percent.GetHashCode();
                if (this.PullAndLaunch != null)
                    hashCode = hashCode * 59 + this.PullAndLaunch.GetHashCode();
                if (this.LimitSet != null)
                    hashCode = hashCode * 59 + this.LimitSet.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Reverse != null)
                    hashCode = hashCode * 59 + this.Reverse.GetHashCode();
                if (this.DeviceCategory != null)
                    hashCode = hashCode * 59 + this.DeviceCategory.GetHashCode();
                if (this.Capability != null)
                    hashCode = hashCode * 59 + this.Capability.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
