/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// Recipe
    /// </summary>
    [DataContract]
    public partial class Recipe :  IEquatable<Recipe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Recipe" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Recipe() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recipe" /> class.
        /// </summary>
        /// <param name="Id">ID (required).</param>
        /// <param name="Title">主题名称 (required).</param>
        /// <param name="Desc">描述 (required).</param>
        /// <param name="Story">故事 (required).</param>
        /// <param name="ImageUrl">背景图地址 (required).</param>
        /// <param name="IconUrl">图标地址 (required).</param>
        /// <param name="Executable">这个场景是不是可以触发的场景 (required).</param>
        /// <param name="Version">创建时间 (required).</param>
        /// <param name="IsActivated">是否激活 (required).</param>
        /// <param name="IsFavorite">是否收藏 (required).</param>
        public Recipe(int? Id = default(int?), string Title = default(string), string Desc = default(string), string Story = default(string), string ImageUrl = default(string), string IconUrl = default(string), bool? Executable = default(bool?), int? Version = default(int?), bool? IsActivated = default(bool?), bool? IsFavorite = default(bool?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Recipe and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for Recipe and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Desc" is required (not null)
            if (Desc == null)
            {
                throw new InvalidDataException("Desc is a required property for Recipe and cannot be null");
            }
            else
            {
                this.Desc = Desc;
            }
            // to ensure "Story" is required (not null)
            if (Story == null)
            {
                throw new InvalidDataException("Story is a required property for Recipe and cannot be null");
            }
            else
            {
                this.Story = Story;
            }
            // to ensure "ImageUrl" is required (not null)
            if (ImageUrl == null)
            {
                throw new InvalidDataException("ImageUrl is a required property for Recipe and cannot be null");
            }
            else
            {
                this.ImageUrl = ImageUrl;
            }
            // to ensure "IconUrl" is required (not null)
            if (IconUrl == null)
            {
                throw new InvalidDataException("IconUrl is a required property for Recipe and cannot be null");
            }
            else
            {
                this.IconUrl = IconUrl;
            }
            // to ensure "Executable" is required (not null)
            if (Executable == null)
            {
                throw new InvalidDataException("Executable is a required property for Recipe and cannot be null");
            }
            else
            {
                this.Executable = Executable;
            }
            // to ensure "Version" is required (not null)
            if (Version == null)
            {
                throw new InvalidDataException("Version is a required property for Recipe and cannot be null");
            }
            else
            {
                this.Version = Version;
            }
            // to ensure "IsActivated" is required (not null)
            if (IsActivated == null)
            {
                throw new InvalidDataException("IsActivated is a required property for Recipe and cannot be null");
            }
            else
            {
                this.IsActivated = IsActivated;
            }
            // to ensure "IsFavorite" is required (not null)
            if (IsFavorite == null)
            {
                throw new InvalidDataException("IsFavorite is a required property for Recipe and cannot be null");
            }
            else
            {
                this.IsFavorite = IsFavorite;
            }
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 主题名称
        /// </summary>
        /// <value>主题名称</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// 描述
        /// </summary>
        /// <value>描述</value>
        [DataMember(Name="desc", EmitDefaultValue=false)]
        public string Desc { get; set; }

        /// <summary>
        /// 故事
        /// </summary>
        /// <value>故事</value>
        [DataMember(Name="story", EmitDefaultValue=false)]
        public string Story { get; set; }

        /// <summary>
        /// 背景图地址
        /// </summary>
        /// <value>背景图地址</value>
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// 图标地址
        /// </summary>
        /// <value>图标地址</value>
        [DataMember(Name="icon_url", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// 这个场景是不是可以触发的场景
        /// </summary>
        /// <value>这个场景是不是可以触发的场景</value>
        [DataMember(Name="executable", EmitDefaultValue=false)]
        public bool? Executable { get; set; }

        /// <summary>
        /// 创建时间
        /// </summary>
        /// <value>创建时间</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// 是否激活
        /// </summary>
        /// <value>是否激活</value>
        [DataMember(Name="is_activated", EmitDefaultValue=false)]
        public bool? IsActivated { get; set; }

        /// <summary>
        /// 是否收藏
        /// </summary>
        /// <value>是否收藏</value>
        [DataMember(Name="is_favorite", EmitDefaultValue=false)]
        public bool? IsFavorite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Recipe {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  Story: ").Append(Story).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  Executable: ").Append(Executable).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  IsActivated: ").Append(IsActivated).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Recipe);
        }

        /// <summary>
        /// Returns true if Recipe instances are equal
        /// </summary>
        /// <param name="input">Instance of Recipe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Recipe input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Desc == input.Desc ||
                    (this.Desc != null &&
                    this.Desc.Equals(input.Desc))
                ) && 
                (
                    this.Story == input.Story ||
                    (this.Story != null &&
                    this.Story.Equals(input.Story))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.Executable == input.Executable ||
                    (this.Executable != null &&
                    this.Executable.Equals(input.Executable))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.IsActivated == input.IsActivated ||
                    (this.IsActivated != null &&
                    this.IsActivated.Equals(input.IsActivated))
                ) && 
                (
                    this.IsFavorite == input.IsFavorite ||
                    (this.IsFavorite != null &&
                    this.IsFavorite.Equals(input.IsFavorite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Desc != null)
                    hashCode = hashCode * 59 + this.Desc.GetHashCode();
                if (this.Story != null)
                    hashCode = hashCode * 59 + this.Story.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                if (this.Executable != null)
                    hashCode = hashCode * 59 + this.Executable.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.IsActivated != null)
                    hashCode = hashCode * 59 + this.IsActivated.GetHashCode();
                if (this.IsFavorite != null)
                    hashCode = hashCode * 59 + this.IsFavorite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
