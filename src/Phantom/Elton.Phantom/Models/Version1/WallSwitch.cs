/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 设置某个墙面开关的某一路长按情景
    /// </summary>
    [DataContract]
    public partial class WallSwitch :  IEquatable<WallSwitch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WallSwitch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WallSwitch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WallSwitch" /> class.
        /// </summary>
        /// <param name="Id">ID (required).</param>
        /// <param name="DeviceIdentifier">设备标识字符串 cf. 总则§2.3 (required).</param>
        /// <param name="OwnDevice">是不是自己的设备 (required).</param>
        /// <param name="Name">设备的名字 (required).</param>
        /// <param name="HouseId">房子ID.</param>
        /// <param name="Connectivity">在线状态说明 cf. 总则§?.</param>
        /// <param name="ChannelsCount">有几路.</param>
        /// <param name="ChannelBulbs">每一路的虚拟灯ID.</param>
        /// <param name="Position">排序用的序号.</param>
        public WallSwitch(int? Id = default(int?), string DeviceIdentifier = default(string), bool? OwnDevice = default(bool?), string Name = default(string), int? HouseId = default(int?), string Connectivity = default(string), int? ChannelsCount = default(int?), List<ChannelBulb> ChannelBulbs = default(List<ChannelBulb>), int? Position = default(int?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for WallSwitch and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "DeviceIdentifier" is required (not null)
            if (DeviceIdentifier == null)
            {
                throw new InvalidDataException("DeviceIdentifier is a required property for WallSwitch and cannot be null");
            }
            else
            {
                this.DeviceIdentifier = DeviceIdentifier;
            }
            // to ensure "OwnDevice" is required (not null)
            if (OwnDevice == null)
            {
                throw new InvalidDataException("OwnDevice is a required property for WallSwitch and cannot be null");
            }
            else
            {
                this.OwnDevice = OwnDevice;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for WallSwitch and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.HouseId = HouseId;
            this.Connectivity = Connectivity;
            this.ChannelsCount = ChannelsCount;
            this.ChannelBulbs = ChannelBulbs;
            this.Position = Position;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 设备标识字符串 cf. 总则§2.3
        /// </summary>
        /// <value>设备标识字符串 cf. 总则§2.3</value>
        [DataMember(Name="device_identifier", EmitDefaultValue=false)]
        public string DeviceIdentifier { get; set; }

        /// <summary>
        /// 是不是自己的设备
        /// </summary>
        /// <value>是不是自己的设备</value>
        [DataMember(Name="own_device?", EmitDefaultValue=false)]
        public bool? OwnDevice { get; set; }

        /// <summary>
        /// 设备的名字
        /// </summary>
        /// <value>设备的名字</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 房子ID
        /// </summary>
        /// <value>房子ID</value>
        [DataMember(Name="house_id", EmitDefaultValue=false)]
        public int? HouseId { get; set; }

        /// <summary>
        /// 在线状态说明 cf. 总则§?
        /// </summary>
        /// <value>在线状态说明 cf. 总则§?</value>
        [DataMember(Name="connectivity", EmitDefaultValue=false)]
        public string Connectivity { get; set; }

        /// <summary>
        /// 有几路
        /// </summary>
        /// <value>有几路</value>
        [DataMember(Name="channels_count", EmitDefaultValue=false)]
        public int? ChannelsCount { get; set; }

        /// <summary>
        /// 每一路的虚拟灯ID
        /// </summary>
        /// <value>每一路的虚拟灯ID</value>
        [DataMember(Name="channel_bulbs", EmitDefaultValue=false)]
        public List<ChannelBulb> ChannelBulbs { get; set; }

        /// <summary>
        /// 排序用的序号
        /// </summary>
        /// <value>排序用的序号</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WallSwitch {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceIdentifier: ").Append(DeviceIdentifier).Append("\n");
            sb.Append("  OwnDevice: ").Append(OwnDevice).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HouseId: ").Append(HouseId).Append("\n");
            sb.Append("  Connectivity: ").Append(Connectivity).Append("\n");
            sb.Append("  ChannelsCount: ").Append(ChannelsCount).Append("\n");
            sb.Append("  ChannelBulbs: ").Append(ChannelBulbs).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WallSwitch);
        }

        /// <summary>
        /// Returns true if WallSwitch instances are equal
        /// </summary>
        /// <param name="input">Instance of WallSwitch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WallSwitch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceIdentifier == input.DeviceIdentifier ||
                    (this.DeviceIdentifier != null &&
                    this.DeviceIdentifier.Equals(input.DeviceIdentifier))
                ) && 
                (
                    this.OwnDevice == input.OwnDevice ||
                    (this.OwnDevice != null &&
                    this.OwnDevice.Equals(input.OwnDevice))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HouseId == input.HouseId ||
                    (this.HouseId != null &&
                    this.HouseId.Equals(input.HouseId))
                ) && 
                (
                    this.Connectivity == input.Connectivity ||
                    (this.Connectivity != null &&
                    this.Connectivity.Equals(input.Connectivity))
                ) && 
                (
                    this.ChannelsCount == input.ChannelsCount ||
                    (this.ChannelsCount != null &&
                    this.ChannelsCount.Equals(input.ChannelsCount))
                ) && 
                (
                    this.ChannelBulbs == input.ChannelBulbs ||
                    this.ChannelBulbs != null &&
                    this.ChannelBulbs.SequenceEqual(input.ChannelBulbs)
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceIdentifier != null)
                    hashCode = hashCode * 59 + this.DeviceIdentifier.GetHashCode();
                if (this.OwnDevice != null)
                    hashCode = hashCode * 59 + this.OwnDevice.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HouseId != null)
                    hashCode = hashCode * 59 + this.HouseId.GetHashCode();
                if (this.Connectivity != null)
                    hashCode = hashCode * 59 + this.Connectivity.GetHashCode();
                if (this.ChannelsCount != null)
                    hashCode = hashCode * 59 + this.ChannelsCount.GetHashCode();
                if (this.ChannelBulbs != null)
                    hashCode = hashCode * 59 + this.ChannelBulbs.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
