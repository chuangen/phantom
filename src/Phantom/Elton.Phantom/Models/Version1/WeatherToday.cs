/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// WeatherToday
    /// </summary>
    [DataContract]
    public partial class WeatherToday :  IEquatable<WeatherToday>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherToday" /> class.
        /// </summary>
        /// <param name="TemperatureHigh">高温.</param>
        /// <param name="TemperatureLow">低温.</param>
        public WeatherToday(float? TemperatureHigh = default(float?), float? TemperatureLow = default(float?))
        {
            this.TemperatureHigh = TemperatureHigh;
            this.TemperatureLow = TemperatureLow;
        }
        
        /// <summary>
        /// 高温
        /// </summary>
        /// <value>高温</value>
        [DataMember(Name="temperature_high", EmitDefaultValue=false)]
        public float? TemperatureHigh { get; set; }

        /// <summary>
        /// 低温
        /// </summary>
        /// <value>低温</value>
        [DataMember(Name="temperature_low", EmitDefaultValue=false)]
        public float? TemperatureLow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WeatherToday {\n");
            sb.Append("  TemperatureHigh: ").Append(TemperatureHigh).Append("\n");
            sb.Append("  TemperatureLow: ").Append(TemperatureLow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WeatherToday);
        }

        /// <summary>
        /// Returns true if WeatherToday instances are equal
        /// </summary>
        /// <param name="input">Instance of WeatherToday to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WeatherToday input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TemperatureHigh == input.TemperatureHigh ||
                    (this.TemperatureHigh != null &&
                    this.TemperatureHigh.Equals(input.TemperatureHigh))
                ) && 
                (
                    this.TemperatureLow == input.TemperatureLow ||
                    (this.TemperatureLow != null &&
                    this.TemperatureLow.Equals(input.TemperatureLow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemperatureHigh != null)
                    hashCode = hashCode * 59 + this.TemperatureHigh.GetHashCode();
                if (this.TemperatureLow != null)
                    hashCode = hashCode * 59 + this.TemperatureLow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
