/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 删除区域中的情景
    /// </summary>
    [DataContract]
    public partial class AreaComponent :  IEquatable<AreaComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AreaComponent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AreaComponent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AreaComponent" /> class.
        /// </summary>
        /// <param name="Id">ID (required).</param>
        /// <param name="Symbol">类型(设备/情景/服务) (required).</param>
        /// <param name="Position">排序用的序号.</param>
        /// <param name="Icon">图标枚举值.</param>
        /// <param name="Component">组件内容 (required).</param>
        public AreaComponent(int? Id = default(int?), string Symbol = default(string), int? Position = default(int?), int? Icon = default(int?), Object Component = default(Object))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for AreaComponent and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Symbol" is required (not null)
            if (Symbol == null)
            {
                throw new InvalidDataException("Symbol is a required property for AreaComponent and cannot be null");
            }
            else
            {
                this.Symbol = Symbol;
            }
            // to ensure "Component" is required (not null)
            if (Component == null)
            {
                throw new InvalidDataException("Component is a required property for AreaComponent and cannot be null");
            }
            else
            {
                this.Component = Component;
            }
            this.Position = Position;
            this.Icon = Icon;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 类型(设备/情景/服务)
        /// </summary>
        /// <value>类型(设备/情景/服务)</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// 排序用的序号
        /// </summary>
        /// <value>排序用的序号</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// 图标枚举值
        /// </summary>
        /// <value>图标枚举值</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public int? Icon { get; set; }

        /// <summary>
        /// 组件内容
        /// </summary>
        /// <value>组件内容</value>
        [DataMember(Name="component", EmitDefaultValue=false)]
        public Object Component { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AreaComponent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AreaComponent);
        }

        /// <summary>
        /// Returns true if AreaComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of AreaComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AreaComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Component == input.Component ||
                    (this.Component != null &&
                    this.Component.Equals(input.Component))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.Component != null)
                    hashCode = hashCode * 59 + this.Component.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
