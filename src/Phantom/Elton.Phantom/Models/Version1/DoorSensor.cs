/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 设置门磁状态消息接收模式
    /// </summary>
    [DataContract]
    public partial class DoorSensor :  IEquatable<DoorSensor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DoorSensor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DoorSensor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DoorSensor" /> class.
        /// </summary>
        /// <param name="Id">ID (required).</param>
        /// <param name="DeviceIdentifier">设备标识字符串 cf. 总则§2.3 (required).</param>
        /// <param name="IsOpen">门磁是否打开状态 (required).</param>
        /// <param name="AlertMode">布置防御模式，0为无，1为正常 (required).</param>
        /// <param name="AlertStatus">1.未布防, 2.正常布防, 3.需关闭门窗后自动布防, 4.报警 (required).</param>
        /// <param name="ScenarioId1">早上打开时触发的情景ID (required).</param>
        /// <param name="ScenarioId2">晚上打开时触发的情景ID (required).</param>
        /// <param name="InDefenceSystem">是否参与全家布防 (required).</param>
        /// <param name="LongTimeOpenAlert">是否会提醒长时间开着 (required).</param>
        /// <param name="OwnDevice">是不是自己的设备 (required).</param>
        /// <param name="Name">设备的名字 (required).</param>
        /// <param name="Position">排序用的序号.</param>
        /// <param name="HouseId">房子ID (required).</param>
        /// <param name="Connectivity">在线状态说明 cf. 总则§? (required).</param>
        /// <param name="LastOpenTime">上一次开门磁的时间,以秒为单位.</param>
        /// <param name="LastCloseTime">上一次关门磁的时间,以秒为单位.</param>
        /// <param name="NotifyMode">通知模式: 门磁开关状态时是否通知, 二进制组合表示, &#39;开&#39;为左数首位, &#39;关&#39;在第二位。 (取值范围: 0-3, 即二进制: 00-11).</param>
        public DoorSensor(int? Id = default(int?), string DeviceIdentifier = default(string), int? IsOpen = default(int?), int? AlertMode = default(int?), int? AlertStatus = default(int?), int? ScenarioId1 = default(int?), int? ScenarioId2 = default(int?), bool? InDefenceSystem = default(bool?), bool? LongTimeOpenAlert = default(bool?), bool? OwnDevice = default(bool?), string Name = default(string), int? Position = default(int?), int? HouseId = default(int?), string Connectivity = default(string), int? LastOpenTime = default(int?), int? LastCloseTime = default(int?), int? NotifyMode = default(int?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "DeviceIdentifier" is required (not null)
            if (DeviceIdentifier == null)
            {
                throw new InvalidDataException("DeviceIdentifier is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.DeviceIdentifier = DeviceIdentifier;
            }
            // to ensure "IsOpen" is required (not null)
            if (IsOpen == null)
            {
                throw new InvalidDataException("IsOpen is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.IsOpen = IsOpen;
            }
            // to ensure "AlertMode" is required (not null)
            if (AlertMode == null)
            {
                throw new InvalidDataException("AlertMode is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.AlertMode = AlertMode;
            }
            // to ensure "AlertStatus" is required (not null)
            if (AlertStatus == null)
            {
                throw new InvalidDataException("AlertStatus is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.AlertStatus = AlertStatus;
            }
            // to ensure "ScenarioId1" is required (not null)
            if (ScenarioId1 == null)
            {
                throw new InvalidDataException("ScenarioId1 is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.ScenarioId1 = ScenarioId1;
            }
            // to ensure "ScenarioId2" is required (not null)
            if (ScenarioId2 == null)
            {
                throw new InvalidDataException("ScenarioId2 is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.ScenarioId2 = ScenarioId2;
            }
            // to ensure "InDefenceSystem" is required (not null)
            if (InDefenceSystem == null)
            {
                throw new InvalidDataException("InDefenceSystem is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.InDefenceSystem = InDefenceSystem;
            }
            // to ensure "LongTimeOpenAlert" is required (not null)
            if (LongTimeOpenAlert == null)
            {
                throw new InvalidDataException("LongTimeOpenAlert is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.LongTimeOpenAlert = LongTimeOpenAlert;
            }
            // to ensure "OwnDevice" is required (not null)
            if (OwnDevice == null)
            {
                throw new InvalidDataException("OwnDevice is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.OwnDevice = OwnDevice;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "HouseId" is required (not null)
            if (HouseId == null)
            {
                throw new InvalidDataException("HouseId is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.HouseId = HouseId;
            }
            // to ensure "Connectivity" is required (not null)
            if (Connectivity == null)
            {
                throw new InvalidDataException("Connectivity is a required property for DoorSensor and cannot be null");
            }
            else
            {
                this.Connectivity = Connectivity;
            }
            this.Position = Position;
            this.LastOpenTime = LastOpenTime;
            this.LastCloseTime = LastCloseTime;
            this.NotifyMode = NotifyMode;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 设备标识字符串 cf. 总则§2.3
        /// </summary>
        /// <value>设备标识字符串 cf. 总则§2.3</value>
        [DataMember(Name="device_identifier", EmitDefaultValue=false)]
        public string DeviceIdentifier { get; set; }

        /// <summary>
        /// 门磁是否打开状态
        /// </summary>
        /// <value>门磁是否打开状态</value>
        [DataMember(Name="is_open", EmitDefaultValue=false)]
        public int? IsOpen { get; set; }

        /// <summary>
        /// 布置防御模式，0为无，1为正常
        /// </summary>
        /// <value>布置防御模式，0为无，1为正常</value>
        [DataMember(Name="alert_mode", EmitDefaultValue=false)]
        public int? AlertMode { get; set; }

        /// <summary>
        /// 1.未布防, 2.正常布防, 3.需关闭门窗后自动布防, 4.报警
        /// </summary>
        /// <value>1.未布防, 2.正常布防, 3.需关闭门窗后自动布防, 4.报警</value>
        [DataMember(Name="alert_status", EmitDefaultValue=false)]
        public int? AlertStatus { get; set; }

        /// <summary>
        /// 早上打开时触发的情景ID
        /// </summary>
        /// <value>早上打开时触发的情景ID</value>
        [DataMember(Name="scenario_id1", EmitDefaultValue=false)]
        public int? ScenarioId1 { get; set; }

        /// <summary>
        /// 晚上打开时触发的情景ID
        /// </summary>
        /// <value>晚上打开时触发的情景ID</value>
        [DataMember(Name="scenario_id2", EmitDefaultValue=false)]
        public int? ScenarioId2 { get; set; }

        /// <summary>
        /// 是否参与全家布防
        /// </summary>
        /// <value>是否参与全家布防</value>
        [DataMember(Name="in_defence_system", EmitDefaultValue=false)]
        public bool? InDefenceSystem { get; set; }

        /// <summary>
        /// 是否会提醒长时间开着
        /// </summary>
        /// <value>是否会提醒长时间开着</value>
        [DataMember(Name="long_time_open_alert", EmitDefaultValue=false)]
        public bool? LongTimeOpenAlert { get; set; }

        /// <summary>
        /// 是不是自己的设备
        /// </summary>
        /// <value>是不是自己的设备</value>
        [DataMember(Name="own_device?", EmitDefaultValue=false)]
        public bool? OwnDevice { get; set; }

        /// <summary>
        /// 设备的名字
        /// </summary>
        /// <value>设备的名字</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 排序用的序号
        /// </summary>
        /// <value>排序用的序号</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// 房子ID
        /// </summary>
        /// <value>房子ID</value>
        [DataMember(Name="house_id", EmitDefaultValue=false)]
        public int? HouseId { get; set; }

        /// <summary>
        /// 在线状态说明 cf. 总则§?
        /// </summary>
        /// <value>在线状态说明 cf. 总则§?</value>
        [DataMember(Name="connectivity", EmitDefaultValue=false)]
        public string Connectivity { get; set; }

        /// <summary>
        /// 上一次开门磁的时间,以秒为单位
        /// </summary>
        /// <value>上一次开门磁的时间,以秒为单位</value>
        [DataMember(Name="last_open_time", EmitDefaultValue=false)]
        public int? LastOpenTime { get; set; }

        /// <summary>
        /// 上一次关门磁的时间,以秒为单位
        /// </summary>
        /// <value>上一次关门磁的时间,以秒为单位</value>
        [DataMember(Name="last_close_time", EmitDefaultValue=false)]
        public int? LastCloseTime { get; set; }

        /// <summary>
        /// 通知模式: 门磁开关状态时是否通知, 二进制组合表示, &#39;开&#39;为左数首位, &#39;关&#39;在第二位。 (取值范围: 0-3, 即二进制: 00-11)
        /// </summary>
        /// <value>通知模式: 门磁开关状态时是否通知, 二进制组合表示, &#39;开&#39;为左数首位, &#39;关&#39;在第二位。 (取值范围: 0-3, 即二进制: 00-11)</value>
        [DataMember(Name="notify_mode", EmitDefaultValue=false)]
        public int? NotifyMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DoorSensor {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceIdentifier: ").Append(DeviceIdentifier).Append("\n");
            sb.Append("  IsOpen: ").Append(IsOpen).Append("\n");
            sb.Append("  AlertMode: ").Append(AlertMode).Append("\n");
            sb.Append("  AlertStatus: ").Append(AlertStatus).Append("\n");
            sb.Append("  ScenarioId1: ").Append(ScenarioId1).Append("\n");
            sb.Append("  ScenarioId2: ").Append(ScenarioId2).Append("\n");
            sb.Append("  InDefenceSystem: ").Append(InDefenceSystem).Append("\n");
            sb.Append("  LongTimeOpenAlert: ").Append(LongTimeOpenAlert).Append("\n");
            sb.Append("  OwnDevice: ").Append(OwnDevice).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  HouseId: ").Append(HouseId).Append("\n");
            sb.Append("  Connectivity: ").Append(Connectivity).Append("\n");
            sb.Append("  LastOpenTime: ").Append(LastOpenTime).Append("\n");
            sb.Append("  LastCloseTime: ").Append(LastCloseTime).Append("\n");
            sb.Append("  NotifyMode: ").Append(NotifyMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DoorSensor);
        }

        /// <summary>
        /// Returns true if DoorSensor instances are equal
        /// </summary>
        /// <param name="input">Instance of DoorSensor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DoorSensor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceIdentifier == input.DeviceIdentifier ||
                    (this.DeviceIdentifier != null &&
                    this.DeviceIdentifier.Equals(input.DeviceIdentifier))
                ) && 
                (
                    this.IsOpen == input.IsOpen ||
                    (this.IsOpen != null &&
                    this.IsOpen.Equals(input.IsOpen))
                ) && 
                (
                    this.AlertMode == input.AlertMode ||
                    (this.AlertMode != null &&
                    this.AlertMode.Equals(input.AlertMode))
                ) && 
                (
                    this.AlertStatus == input.AlertStatus ||
                    (this.AlertStatus != null &&
                    this.AlertStatus.Equals(input.AlertStatus))
                ) && 
                (
                    this.ScenarioId1 == input.ScenarioId1 ||
                    (this.ScenarioId1 != null &&
                    this.ScenarioId1.Equals(input.ScenarioId1))
                ) && 
                (
                    this.ScenarioId2 == input.ScenarioId2 ||
                    (this.ScenarioId2 != null &&
                    this.ScenarioId2.Equals(input.ScenarioId2))
                ) && 
                (
                    this.InDefenceSystem == input.InDefenceSystem ||
                    (this.InDefenceSystem != null &&
                    this.InDefenceSystem.Equals(input.InDefenceSystem))
                ) && 
                (
                    this.LongTimeOpenAlert == input.LongTimeOpenAlert ||
                    (this.LongTimeOpenAlert != null &&
                    this.LongTimeOpenAlert.Equals(input.LongTimeOpenAlert))
                ) && 
                (
                    this.OwnDevice == input.OwnDevice ||
                    (this.OwnDevice != null &&
                    this.OwnDevice.Equals(input.OwnDevice))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.HouseId == input.HouseId ||
                    (this.HouseId != null &&
                    this.HouseId.Equals(input.HouseId))
                ) && 
                (
                    this.Connectivity == input.Connectivity ||
                    (this.Connectivity != null &&
                    this.Connectivity.Equals(input.Connectivity))
                ) && 
                (
                    this.LastOpenTime == input.LastOpenTime ||
                    (this.LastOpenTime != null &&
                    this.LastOpenTime.Equals(input.LastOpenTime))
                ) && 
                (
                    this.LastCloseTime == input.LastCloseTime ||
                    (this.LastCloseTime != null &&
                    this.LastCloseTime.Equals(input.LastCloseTime))
                ) && 
                (
                    this.NotifyMode == input.NotifyMode ||
                    (this.NotifyMode != null &&
                    this.NotifyMode.Equals(input.NotifyMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceIdentifier != null)
                    hashCode = hashCode * 59 + this.DeviceIdentifier.GetHashCode();
                if (this.IsOpen != null)
                    hashCode = hashCode * 59 + this.IsOpen.GetHashCode();
                if (this.AlertMode != null)
                    hashCode = hashCode * 59 + this.AlertMode.GetHashCode();
                if (this.AlertStatus != null)
                    hashCode = hashCode * 59 + this.AlertStatus.GetHashCode();
                if (this.ScenarioId1 != null)
                    hashCode = hashCode * 59 + this.ScenarioId1.GetHashCode();
                if (this.ScenarioId2 != null)
                    hashCode = hashCode * 59 + this.ScenarioId2.GetHashCode();
                if (this.InDefenceSystem != null)
                    hashCode = hashCode * 59 + this.InDefenceSystem.GetHashCode();
                if (this.LongTimeOpenAlert != null)
                    hashCode = hashCode * 59 + this.LongTimeOpenAlert.GetHashCode();
                if (this.OwnDevice != null)
                    hashCode = hashCode * 59 + this.OwnDevice.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.HouseId != null)
                    hashCode = hashCode * 59 + this.HouseId.GetHashCode();
                if (this.Connectivity != null)
                    hashCode = hashCode * 59 + this.Connectivity.GetHashCode();
                if (this.LastOpenTime != null)
                    hashCode = hashCode * 59 + this.LastOpenTime.GetHashCode();
                if (this.LastCloseTime != null)
                    hashCode = hashCode * 59 + this.LastCloseTime.GetHashCode();
                if (this.NotifyMode != null)
                    hashCode = hashCode * 59 + this.NotifyMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
