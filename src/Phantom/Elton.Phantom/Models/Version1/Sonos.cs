/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 控制Sonos
    /// </summary>
    [DataContract]
    public partial class Sonos :  IEquatable<Sonos>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sonos" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Sonos() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Sonos" /> class.
        /// </summary>
        /// <param name="Id">设备ID (required).</param>
        /// <param name="Name">设备名称 (required).</param>
        /// <param name="UserId">用户ID (required).</param>
        /// <param name="HouseId">房间ID (required).</param>
        /// <param name="GenericModuleId">通用模块ID (required).</param>
        /// <param name="Index">设备索引 (required).</param>
        public Sonos(int? Id = default(int?), string Name = default(string), int? UserId = default(int?), int? HouseId = default(int?), int? GenericModuleId = default(int?), int? Index = default(int?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Sonos and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Sonos and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for Sonos and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "HouseId" is required (not null)
            if (HouseId == null)
            {
                throw new InvalidDataException("HouseId is a required property for Sonos and cannot be null");
            }
            else
            {
                this.HouseId = HouseId;
            }
            // to ensure "GenericModuleId" is required (not null)
            if (GenericModuleId == null)
            {
                throw new InvalidDataException("GenericModuleId is a required property for Sonos and cannot be null");
            }
            else
            {
                this.GenericModuleId = GenericModuleId;
            }
            // to ensure "Index" is required (not null)
            if (Index == null)
            {
                throw new InvalidDataException("Index is a required property for Sonos and cannot be null");
            }
            else
            {
                this.Index = Index;
            }
        }
        
        /// <summary>
        /// 设备ID
        /// </summary>
        /// <value>设备ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 设备名称
        /// </summary>
        /// <value>设备名称</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 用户ID
        /// </summary>
        /// <value>用户ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// 房间ID
        /// </summary>
        /// <value>房间ID</value>
        [DataMember(Name="house_id", EmitDefaultValue=false)]
        public int? HouseId { get; set; }

        /// <summary>
        /// 通用模块ID
        /// </summary>
        /// <value>通用模块ID</value>
        [DataMember(Name="generic_module_id", EmitDefaultValue=false)]
        public int? GenericModuleId { get; set; }

        /// <summary>
        /// 设备索引
        /// </summary>
        /// <value>设备索引</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sonos {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  HouseId: ").Append(HouseId).Append("\n");
            sb.Append("  GenericModuleId: ").Append(GenericModuleId).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sonos);
        }

        /// <summary>
        /// Returns true if Sonos instances are equal
        /// </summary>
        /// <param name="input">Instance of Sonos to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sonos input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.HouseId == input.HouseId ||
                    (this.HouseId != null &&
                    this.HouseId.Equals(input.HouseId))
                ) && 
                (
                    this.GenericModuleId == input.GenericModuleId ||
                    (this.GenericModuleId != null &&
                    this.GenericModuleId.Equals(input.GenericModuleId))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.HouseId != null)
                    hashCode = hashCode * 59 + this.HouseId.GetHashCode();
                if (this.GenericModuleId != null)
                    hashCode = hashCode * 59 + this.GenericModuleId.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
