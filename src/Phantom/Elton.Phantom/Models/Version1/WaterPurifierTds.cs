/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// WaterPurifierTds
    /// </summary>
    [DataContract]
    public partial class WaterPurifierTds :  IEquatable<WaterPurifierTds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WaterPurifierTds" /> class.
        /// </summary>
        /// <param name="InTds">InTds.</param>
        /// <param name="OutTds">OutTds.</param>
        public WaterPurifierTds(string InTds = default(string), string OutTds = default(string))
        {
            this.InTds = InTds;
            this.OutTds = OutTds;
        }
        
        /// <summary>
        /// Gets or Sets InTds
        /// </summary>
        [DataMember(Name="in_tds", EmitDefaultValue=false)]
        public string InTds { get; set; }

        /// <summary>
        /// Gets or Sets OutTds
        /// </summary>
        [DataMember(Name="out_tds", EmitDefaultValue=false)]
        public string OutTds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WaterPurifierTds {\n");
            sb.Append("  InTds: ").Append(InTds).Append("\n");
            sb.Append("  OutTds: ").Append(OutTds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WaterPurifierTds);
        }

        /// <summary>
        /// Returns true if WaterPurifierTds instances are equal
        /// </summary>
        /// <param name="input">Instance of WaterPurifierTds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WaterPurifierTds input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InTds == input.InTds ||
                    (this.InTds != null &&
                    this.InTds.Equals(input.InTds))
                ) && 
                (
                    this.OutTds == input.OutTds ||
                    (this.OutTds != null &&
                    this.OutTds.Equals(input.OutTds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InTds != null)
                    hashCode = hashCode * 59 + this.InTds.GetHashCode();
                if (this.OutTds != null)
                    hashCode = hashCode * 59 + this.OutTds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
