/* 
 * Version 1
 *
 * This is version 1 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version1
{
    /// <summary>
    /// 设置红外的情景id
    /// </summary>
    [DataContract]
    public partial class InfraredSensor :  IEquatable<InfraredSensor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InfraredSensor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InfraredSensor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InfraredSensor" /> class.
        /// </summary>
        /// <param name="Id">ID (required).</param>
        /// <param name="Name">设备的名字 (required).</param>
        /// <param name="DeviceIdentifier">设备标识字符串 cf. 总则§2.3 (required).</param>
        /// <param name="Position">排序用的序号.</param>
        /// <param name="Connectivity">在线状态说明 cf. 总则§? (required).</param>
        /// <param name="Active">通道7状态 (required).</param>
        /// <param name="C0">通道0是否有人 (required).</param>
        /// <param name="C1">通道1是否有人 (required).</param>
        /// <param name="C2">通道2是否有人 (required).</param>
        /// <param name="C3">通道3是否有人 (required).</param>
        /// <param name="C4">通道4是否有人 (required).</param>
        /// <param name="C5">通道5是否有人 (required).</param>
        /// <param name="C6">通道6是否有人 (required).</param>
        /// <param name="C7">通道7是否有人 (required).</param>
        /// <param name="OwnDevice">是不是自己的设备 (required).</param>
        /// <param name="SecurityPatterns">SecurityPatterns.</param>
        /// <param name="RecentLogs">红外日志 (required).</param>
        /// <param name="EnableAdvanced">是否启用高级设置 (required).</param>
        /// <param name="Sensitivity">红外灵敏度设置, 0(高)/1(低) (required).</param>
        /// <param name="DelayedTime">红外延迟时间 0(30s)/1(5min)/2(15min) (required).</param>
        /// <param name="Scenarios">情景数组.</param>
        public InfraredSensor(int? Id = default(int?), string Name = default(string), string DeviceIdentifier = default(string), int? Position = default(int?), string Connectivity = default(string), bool? Active = default(bool?), int? C0 = default(int?), int? C1 = default(int?), int? C2 = default(int?), int? C3 = default(int?), int? C4 = default(int?), int? C5 = default(int?), int? C6 = default(int?), int? C7 = default(int?), bool? OwnDevice = default(bool?), SecurityPatternOverview SecurityPatterns = default(SecurityPatternOverview), Object RecentLogs = default(Object), bool? EnableAdvanced = default(bool?), int? Sensitivity = default(int?), int? DelayedTime = default(int?), List<int> Scenarios = default(List<int>))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "DeviceIdentifier" is required (not null)
            if (DeviceIdentifier == null)
            {
                throw new InvalidDataException("DeviceIdentifier is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.DeviceIdentifier = DeviceIdentifier;
            }
            // to ensure "Connectivity" is required (not null)
            if (Connectivity == null)
            {
                throw new InvalidDataException("Connectivity is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.Connectivity = Connectivity;
            }
            // to ensure "Active" is required (not null)
            if (Active == null)
            {
                throw new InvalidDataException("Active is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.Active = Active;
            }
            // to ensure "C0" is required (not null)
            if (C0 == null)
            {
                throw new InvalidDataException("C0 is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.C0 = C0;
            }
            // to ensure "C1" is required (not null)
            if (C1 == null)
            {
                throw new InvalidDataException("C1 is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.C1 = C1;
            }
            // to ensure "C2" is required (not null)
            if (C2 == null)
            {
                throw new InvalidDataException("C2 is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.C2 = C2;
            }
            // to ensure "C3" is required (not null)
            if (C3 == null)
            {
                throw new InvalidDataException("C3 is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.C3 = C3;
            }
            // to ensure "C4" is required (not null)
            if (C4 == null)
            {
                throw new InvalidDataException("C4 is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.C4 = C4;
            }
            // to ensure "C5" is required (not null)
            if (C5 == null)
            {
                throw new InvalidDataException("C5 is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.C5 = C5;
            }
            // to ensure "C6" is required (not null)
            if (C6 == null)
            {
                throw new InvalidDataException("C6 is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.C6 = C6;
            }
            // to ensure "C7" is required (not null)
            if (C7 == null)
            {
                throw new InvalidDataException("C7 is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.C7 = C7;
            }
            // to ensure "OwnDevice" is required (not null)
            if (OwnDevice == null)
            {
                throw new InvalidDataException("OwnDevice is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.OwnDevice = OwnDevice;
            }
            // to ensure "RecentLogs" is required (not null)
            if (RecentLogs == null)
            {
                throw new InvalidDataException("RecentLogs is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.RecentLogs = RecentLogs;
            }
            // to ensure "EnableAdvanced" is required (not null)
            if (EnableAdvanced == null)
            {
                throw new InvalidDataException("EnableAdvanced is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.EnableAdvanced = EnableAdvanced;
            }
            // to ensure "Sensitivity" is required (not null)
            if (Sensitivity == null)
            {
                throw new InvalidDataException("Sensitivity is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.Sensitivity = Sensitivity;
            }
            // to ensure "DelayedTime" is required (not null)
            if (DelayedTime == null)
            {
                throw new InvalidDataException("DelayedTime is a required property for InfraredSensor and cannot be null");
            }
            else
            {
                this.DelayedTime = DelayedTime;
            }
            this.Position = Position;
            this.SecurityPatterns = SecurityPatterns;
            this.Scenarios = Scenarios;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 设备的名字
        /// </summary>
        /// <value>设备的名字</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 设备标识字符串 cf. 总则§2.3
        /// </summary>
        /// <value>设备标识字符串 cf. 总则§2.3</value>
        [DataMember(Name="device_identifier", EmitDefaultValue=false)]
        public string DeviceIdentifier { get; set; }

        /// <summary>
        /// 排序用的序号
        /// </summary>
        /// <value>排序用的序号</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// 在线状态说明 cf. 总则§?
        /// </summary>
        /// <value>在线状态说明 cf. 总则§?</value>
        [DataMember(Name="connectivity", EmitDefaultValue=false)]
        public string Connectivity { get; set; }

        /// <summary>
        /// 通道7状态
        /// </summary>
        /// <value>通道7状态</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// 通道0是否有人
        /// </summary>
        /// <value>通道0是否有人</value>
        [DataMember(Name="c0", EmitDefaultValue=false)]
        public int? C0 { get; set; }

        /// <summary>
        /// 通道1是否有人
        /// </summary>
        /// <value>通道1是否有人</value>
        [DataMember(Name="c1", EmitDefaultValue=false)]
        public int? C1 { get; set; }

        /// <summary>
        /// 通道2是否有人
        /// </summary>
        /// <value>通道2是否有人</value>
        [DataMember(Name="c2", EmitDefaultValue=false)]
        public int? C2 { get; set; }

        /// <summary>
        /// 通道3是否有人
        /// </summary>
        /// <value>通道3是否有人</value>
        [DataMember(Name="c3", EmitDefaultValue=false)]
        public int? C3 { get; set; }

        /// <summary>
        /// 通道4是否有人
        /// </summary>
        /// <value>通道4是否有人</value>
        [DataMember(Name="c4", EmitDefaultValue=false)]
        public int? C4 { get; set; }

        /// <summary>
        /// 通道5是否有人
        /// </summary>
        /// <value>通道5是否有人</value>
        [DataMember(Name="c5", EmitDefaultValue=false)]
        public int? C5 { get; set; }

        /// <summary>
        /// 通道6是否有人
        /// </summary>
        /// <value>通道6是否有人</value>
        [DataMember(Name="c6", EmitDefaultValue=false)]
        public int? C6 { get; set; }

        /// <summary>
        /// 通道7是否有人
        /// </summary>
        /// <value>通道7是否有人</value>
        [DataMember(Name="c7", EmitDefaultValue=false)]
        public int? C7 { get; set; }

        /// <summary>
        /// 是不是自己的设备
        /// </summary>
        /// <value>是不是自己的设备</value>
        [DataMember(Name="own_device?", EmitDefaultValue=false)]
        public bool? OwnDevice { get; set; }

        /// <summary>
        /// Gets or Sets SecurityPatterns
        /// </summary>
        [DataMember(Name="security_patterns", EmitDefaultValue=false)]
        public SecurityPatternOverview SecurityPatterns { get; set; }

        /// <summary>
        /// 红外日志
        /// </summary>
        /// <value>红外日志</value>
        [DataMember(Name="recent_logs", EmitDefaultValue=false)]
        public Object RecentLogs { get; set; }

        /// <summary>
        /// 是否启用高级设置
        /// </summary>
        /// <value>是否启用高级设置</value>
        [DataMember(Name="enable_advanced", EmitDefaultValue=false)]
        public bool? EnableAdvanced { get; set; }

        /// <summary>
        /// 红外灵敏度设置, 0(高)/1(低)
        /// </summary>
        /// <value>红外灵敏度设置, 0(高)/1(低)</value>
        [DataMember(Name="sensitivity", EmitDefaultValue=false)]
        public int? Sensitivity { get; set; }

        /// <summary>
        /// 红外延迟时间 0(30s)/1(5min)/2(15min)
        /// </summary>
        /// <value>红外延迟时间 0(30s)/1(5min)/2(15min)</value>
        [DataMember(Name="delayed_time", EmitDefaultValue=false)]
        public int? DelayedTime { get; set; }

        /// <summary>
        /// 情景数组
        /// </summary>
        /// <value>情景数组</value>
        [DataMember(Name="scenarios", EmitDefaultValue=false)]
        public List<int> Scenarios { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InfraredSensor {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DeviceIdentifier: ").Append(DeviceIdentifier).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Connectivity: ").Append(Connectivity).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  C0: ").Append(C0).Append("\n");
            sb.Append("  C1: ").Append(C1).Append("\n");
            sb.Append("  C2: ").Append(C2).Append("\n");
            sb.Append("  C3: ").Append(C3).Append("\n");
            sb.Append("  C4: ").Append(C4).Append("\n");
            sb.Append("  C5: ").Append(C5).Append("\n");
            sb.Append("  C6: ").Append(C6).Append("\n");
            sb.Append("  C7: ").Append(C7).Append("\n");
            sb.Append("  OwnDevice: ").Append(OwnDevice).Append("\n");
            sb.Append("  SecurityPatterns: ").Append(SecurityPatterns).Append("\n");
            sb.Append("  RecentLogs: ").Append(RecentLogs).Append("\n");
            sb.Append("  EnableAdvanced: ").Append(EnableAdvanced).Append("\n");
            sb.Append("  Sensitivity: ").Append(Sensitivity).Append("\n");
            sb.Append("  DelayedTime: ").Append(DelayedTime).Append("\n");
            sb.Append("  Scenarios: ").Append(Scenarios).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InfraredSensor);
        }

        /// <summary>
        /// Returns true if InfraredSensor instances are equal
        /// </summary>
        /// <param name="input">Instance of InfraredSensor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InfraredSensor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DeviceIdentifier == input.DeviceIdentifier ||
                    (this.DeviceIdentifier != null &&
                    this.DeviceIdentifier.Equals(input.DeviceIdentifier))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Connectivity == input.Connectivity ||
                    (this.Connectivity != null &&
                    this.Connectivity.Equals(input.Connectivity))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.C0 == input.C0 ||
                    (this.C0 != null &&
                    this.C0.Equals(input.C0))
                ) && 
                (
                    this.C1 == input.C1 ||
                    (this.C1 != null &&
                    this.C1.Equals(input.C1))
                ) && 
                (
                    this.C2 == input.C2 ||
                    (this.C2 != null &&
                    this.C2.Equals(input.C2))
                ) && 
                (
                    this.C3 == input.C3 ||
                    (this.C3 != null &&
                    this.C3.Equals(input.C3))
                ) && 
                (
                    this.C4 == input.C4 ||
                    (this.C4 != null &&
                    this.C4.Equals(input.C4))
                ) && 
                (
                    this.C5 == input.C5 ||
                    (this.C5 != null &&
                    this.C5.Equals(input.C5))
                ) && 
                (
                    this.C6 == input.C6 ||
                    (this.C6 != null &&
                    this.C6.Equals(input.C6))
                ) && 
                (
                    this.C7 == input.C7 ||
                    (this.C7 != null &&
                    this.C7.Equals(input.C7))
                ) && 
                (
                    this.OwnDevice == input.OwnDevice ||
                    (this.OwnDevice != null &&
                    this.OwnDevice.Equals(input.OwnDevice))
                ) && 
                (
                    this.SecurityPatterns == input.SecurityPatterns ||
                    (this.SecurityPatterns != null &&
                    this.SecurityPatterns.Equals(input.SecurityPatterns))
                ) && 
                (
                    this.RecentLogs == input.RecentLogs ||
                    (this.RecentLogs != null &&
                    this.RecentLogs.Equals(input.RecentLogs))
                ) && 
                (
                    this.EnableAdvanced == input.EnableAdvanced ||
                    (this.EnableAdvanced != null &&
                    this.EnableAdvanced.Equals(input.EnableAdvanced))
                ) && 
                (
                    this.Sensitivity == input.Sensitivity ||
                    (this.Sensitivity != null &&
                    this.Sensitivity.Equals(input.Sensitivity))
                ) && 
                (
                    this.DelayedTime == input.DelayedTime ||
                    (this.DelayedTime != null &&
                    this.DelayedTime.Equals(input.DelayedTime))
                ) && 
                (
                    this.Scenarios == input.Scenarios ||
                    this.Scenarios != null &&
                    this.Scenarios.SequenceEqual(input.Scenarios)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DeviceIdentifier != null)
                    hashCode = hashCode * 59 + this.DeviceIdentifier.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Connectivity != null)
                    hashCode = hashCode * 59 + this.Connectivity.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.C0 != null)
                    hashCode = hashCode * 59 + this.C0.GetHashCode();
                if (this.C1 != null)
                    hashCode = hashCode * 59 + this.C1.GetHashCode();
                if (this.C2 != null)
                    hashCode = hashCode * 59 + this.C2.GetHashCode();
                if (this.C3 != null)
                    hashCode = hashCode * 59 + this.C3.GetHashCode();
                if (this.C4 != null)
                    hashCode = hashCode * 59 + this.C4.GetHashCode();
                if (this.C5 != null)
                    hashCode = hashCode * 59 + this.C5.GetHashCode();
                if (this.C6 != null)
                    hashCode = hashCode * 59 + this.C6.GetHashCode();
                if (this.C7 != null)
                    hashCode = hashCode * 59 + this.C7.GetHashCode();
                if (this.OwnDevice != null)
                    hashCode = hashCode * 59 + this.OwnDevice.GetHashCode();
                if (this.SecurityPatterns != null)
                    hashCode = hashCode * 59 + this.SecurityPatterns.GetHashCode();
                if (this.RecentLogs != null)
                    hashCode = hashCode * 59 + this.RecentLogs.GetHashCode();
                if (this.EnableAdvanced != null)
                    hashCode = hashCode * 59 + this.EnableAdvanced.GetHashCode();
                if (this.Sensitivity != null)
                    hashCode = hashCode * 59 + this.Sensitivity.GetHashCode();
                if (this.DelayedTime != null)
                    hashCode = hashCode * 59 + this.DelayedTime.GetHashCode();
                if (this.Scenarios != null)
                    hashCode = hashCode * 59 + this.Scenarios.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
