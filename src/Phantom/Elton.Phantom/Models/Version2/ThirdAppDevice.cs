/* 
 * Version 2
 *
 * This is version 2 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version2
{
    /// <summary>
    /// ThirdAppDevice
    /// </summary>
    [DataContract]
    public partial class ThirdAppDevice :  IEquatable<ThirdAppDevice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThirdAppDevice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ThirdAppDevice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThirdAppDevice" /> class.
        /// </summary>
        /// <param name="Id">id (required).</param>
        /// <param name="Title">title (required).</param>
        /// <param name="Description">description (required).</param>
        /// <param name="SaleUrl">sale_url (required).</param>
        /// <param name="IconUrl">icon_url (required).</param>
        public ThirdAppDevice(int? Id = default(int?), string Title = default(string), string Description = default(string), string SaleUrl = default(string), string IconUrl = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for ThirdAppDevice and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for ThirdAppDevice and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for ThirdAppDevice and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "SaleUrl" is required (not null)
            if (SaleUrl == null)
            {
                throw new InvalidDataException("SaleUrl is a required property for ThirdAppDevice and cannot be null");
            }
            else
            {
                this.SaleUrl = SaleUrl;
            }
            // to ensure "IconUrl" is required (not null)
            if (IconUrl == null)
            {
                throw new InvalidDataException("IconUrl is a required property for ThirdAppDevice and cannot be null");
            }
            else
            {
                this.IconUrl = IconUrl;
            }
        }
        
        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// title
        /// </summary>
        /// <value>title</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// sale_url
        /// </summary>
        /// <value>sale_url</value>
        [DataMember(Name="sale_url", EmitDefaultValue=false)]
        public string SaleUrl { get; set; }

        /// <summary>
        /// icon_url
        /// </summary>
        /// <value>icon_url</value>
        [DataMember(Name="icon_url", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThirdAppDevice {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SaleUrl: ").Append(SaleUrl).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThirdAppDevice);
        }

        /// <summary>
        /// Returns true if ThirdAppDevice instances are equal
        /// </summary>
        /// <param name="input">Instance of ThirdAppDevice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThirdAppDevice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SaleUrl == input.SaleUrl ||
                    (this.SaleUrl != null &&
                    this.SaleUrl.Equals(input.SaleUrl))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SaleUrl != null)
                    hashCode = hashCode * 59 + this.SaleUrl.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
