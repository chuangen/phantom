/* 
 * Version 2
 *
 * This is version 2 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version2
{
    /// <summary>
    /// 订阅指定的第三方应用
    /// </summary>
    [DataContract]
    public partial class UserThirdAppV2 :  IEquatable<UserThirdAppV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserThirdAppV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserThirdAppV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserThirdAppV2" /> class.
        /// </summary>
        /// <param name="Id">id (required).</param>
        /// <param name="Name">服务名称 (required).</param>
        /// <param name="Appearance">0：默认， 1：在详情和商城隐藏 (required).</param>
        /// <param name="OauthApplicationId">服务 Oauth 注册 ID (required).</param>
        /// <param name="DetailRegistIdentify">服务在 JS 中注册的名字 (required).</param>
        /// <param name="LastVersion">最新版本 (required).</param>
        /// <param name="InstallUrl">服务 JS Bundle 下载地址 URL (required).</param>
        /// <param name="IconUrl">应用图标 (required).</param>
        /// <param name="InstallTimeAt">用户安装的时间，单位秒.</param>
        /// <param name="StoreDescription">商城简介/副标题 (required).</param>
        public UserThirdAppV2(int? Id = default(int?), string Name = default(string), int? Appearance = default(int?), string OauthApplicationId = default(string), string DetailRegistIdentify = default(string), string LastVersion = default(string), string InstallUrl = default(string), string IconUrl = default(string), int? InstallTimeAt = default(int?), string StoreDescription = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for UserThirdAppV2 and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for UserThirdAppV2 and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Appearance" is required (not null)
            if (Appearance == null)
            {
                throw new InvalidDataException("Appearance is a required property for UserThirdAppV2 and cannot be null");
            }
            else
            {
                this.Appearance = Appearance;
            }
            // to ensure "OauthApplicationId" is required (not null)
            if (OauthApplicationId == null)
            {
                throw new InvalidDataException("OauthApplicationId is a required property for UserThirdAppV2 and cannot be null");
            }
            else
            {
                this.OauthApplicationId = OauthApplicationId;
            }
            // to ensure "DetailRegistIdentify" is required (not null)
            if (DetailRegistIdentify == null)
            {
                throw new InvalidDataException("DetailRegistIdentify is a required property for UserThirdAppV2 and cannot be null");
            }
            else
            {
                this.DetailRegistIdentify = DetailRegistIdentify;
            }
            // to ensure "LastVersion" is required (not null)
            if (LastVersion == null)
            {
                throw new InvalidDataException("LastVersion is a required property for UserThirdAppV2 and cannot be null");
            }
            else
            {
                this.LastVersion = LastVersion;
            }
            // to ensure "InstallUrl" is required (not null)
            if (InstallUrl == null)
            {
                throw new InvalidDataException("InstallUrl is a required property for UserThirdAppV2 and cannot be null");
            }
            else
            {
                this.InstallUrl = InstallUrl;
            }
            // to ensure "IconUrl" is required (not null)
            if (IconUrl == null)
            {
                throw new InvalidDataException("IconUrl is a required property for UserThirdAppV2 and cannot be null");
            }
            else
            {
                this.IconUrl = IconUrl;
            }
            // to ensure "StoreDescription" is required (not null)
            if (StoreDescription == null)
            {
                throw new InvalidDataException("StoreDescription is a required property for UserThirdAppV2 and cannot be null");
            }
            else
            {
                this.StoreDescription = StoreDescription;
            }
            this.InstallTimeAt = InstallTimeAt;
        }
        
        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 服务名称
        /// </summary>
        /// <value>服务名称</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 0：默认， 1：在详情和商城隐藏
        /// </summary>
        /// <value>0：默认， 1：在详情和商城隐藏</value>
        [DataMember(Name="appearance", EmitDefaultValue=false)]
        public int? Appearance { get; set; }

        /// <summary>
        /// 服务 Oauth 注册 ID
        /// </summary>
        /// <value>服务 Oauth 注册 ID</value>
        [DataMember(Name="oauth_application_id", EmitDefaultValue=false)]
        public string OauthApplicationId { get; set; }

        /// <summary>
        /// 服务在 JS 中注册的名字
        /// </summary>
        /// <value>服务在 JS 中注册的名字</value>
        [DataMember(Name="detail_regist_identify", EmitDefaultValue=false)]
        public string DetailRegistIdentify { get; set; }

        /// <summary>
        /// 最新版本
        /// </summary>
        /// <value>最新版本</value>
        [DataMember(Name="last_version", EmitDefaultValue=false)]
        public string LastVersion { get; set; }

        /// <summary>
        /// 服务 JS Bundle 下载地址 URL
        /// </summary>
        /// <value>服务 JS Bundle 下载地址 URL</value>
        [DataMember(Name="install_url", EmitDefaultValue=false)]
        public string InstallUrl { get; set; }

        /// <summary>
        /// 应用图标
        /// </summary>
        /// <value>应用图标</value>
        [DataMember(Name="icon_url", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// 用户安装的时间，单位秒
        /// </summary>
        /// <value>用户安装的时间，单位秒</value>
        [DataMember(Name="install_time_at", EmitDefaultValue=false)]
        public int? InstallTimeAt { get; set; }

        /// <summary>
        /// 商城简介/副标题
        /// </summary>
        /// <value>商城简介/副标题</value>
        [DataMember(Name="store_description", EmitDefaultValue=false)]
        public string StoreDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserThirdAppV2 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Appearance: ").Append(Appearance).Append("\n");
            sb.Append("  OauthApplicationId: ").Append(OauthApplicationId).Append("\n");
            sb.Append("  DetailRegistIdentify: ").Append(DetailRegistIdentify).Append("\n");
            sb.Append("  LastVersion: ").Append(LastVersion).Append("\n");
            sb.Append("  InstallUrl: ").Append(InstallUrl).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  InstallTimeAt: ").Append(InstallTimeAt).Append("\n");
            sb.Append("  StoreDescription: ").Append(StoreDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserThirdAppV2);
        }

        /// <summary>
        /// Returns true if UserThirdAppV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of UserThirdAppV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserThirdAppV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Appearance == input.Appearance ||
                    (this.Appearance != null &&
                    this.Appearance.Equals(input.Appearance))
                ) && 
                (
                    this.OauthApplicationId == input.OauthApplicationId ||
                    (this.OauthApplicationId != null &&
                    this.OauthApplicationId.Equals(input.OauthApplicationId))
                ) && 
                (
                    this.DetailRegistIdentify == input.DetailRegistIdentify ||
                    (this.DetailRegistIdentify != null &&
                    this.DetailRegistIdentify.Equals(input.DetailRegistIdentify))
                ) && 
                (
                    this.LastVersion == input.LastVersion ||
                    (this.LastVersion != null &&
                    this.LastVersion.Equals(input.LastVersion))
                ) && 
                (
                    this.InstallUrl == input.InstallUrl ||
                    (this.InstallUrl != null &&
                    this.InstallUrl.Equals(input.InstallUrl))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.InstallTimeAt == input.InstallTimeAt ||
                    (this.InstallTimeAt != null &&
                    this.InstallTimeAt.Equals(input.InstallTimeAt))
                ) && 
                (
                    this.StoreDescription == input.StoreDescription ||
                    (this.StoreDescription != null &&
                    this.StoreDescription.Equals(input.StoreDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Appearance != null)
                    hashCode = hashCode * 59 + this.Appearance.GetHashCode();
                if (this.OauthApplicationId != null)
                    hashCode = hashCode * 59 + this.OauthApplicationId.GetHashCode();
                if (this.DetailRegistIdentify != null)
                    hashCode = hashCode * 59 + this.DetailRegistIdentify.GetHashCode();
                if (this.LastVersion != null)
                    hashCode = hashCode * 59 + this.LastVersion.GetHashCode();
                if (this.InstallUrl != null)
                    hashCode = hashCode * 59 + this.InstallUrl.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                if (this.InstallTimeAt != null)
                    hashCode = hashCode * 59 + this.InstallTimeAt.GetHashCode();
                if (this.StoreDescription != null)
                    hashCode = hashCode * 59 + this.StoreDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
