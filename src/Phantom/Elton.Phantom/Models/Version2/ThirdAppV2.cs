/* 
 * Version 2
 *
 * This is version 2 document
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elton.Phantom.Models.SwaggerDateConverter;

namespace Elton.Phantom.Models.Version2
{
    /// <summary>
    /// 下载最新官方应用
    /// </summary>
    [DataContract]
    public partial class ThirdAppV2 :  IEquatable<ThirdAppV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThirdAppV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ThirdAppV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThirdAppV2" /> class.
        /// </summary>
        /// <param name="Id">id (required).</param>
        /// <param name="Name">应用名称 (required).</param>
        /// <param name="Appearance">0：默认， 1：在详情和商城隐藏.</param>
        /// <param name="IsNew">新服务 (required).</param>
        /// <param name="StoreDescription">商城简介/副标题 (required).</param>
        /// <param name="StoreIconUrl">应用缩略图链接(显示在应用商城列表页) (required).</param>
        /// <param name="Description">服务功能详情介绍(详情页) (required).</param>
        /// <param name="AuthInfo">授权信息 (required).</param>
        /// <param name="DetailRegistIdentify">服务在 JS 中注册的名字 (required).</param>
        /// <param name="UserId">开发者ID (required).</param>
        /// <param name="UserName">开发者名字 (required).</param>
        /// <param name="LastVersion">最新版本 (required).</param>
        /// <param name="LastUpdated">最后更新日期 (required).</param>
        /// <param name="InstallQuantity">安装人数 (required).</param>
        /// <param name="DownloadQuantity">下载量 (required).</param>
        /// <param name="IconUrl">应用图标 (required).</param>
        /// <param name="DependDevices">DependDevices.</param>
        public ThirdAppV2(int? Id = default(int?), string Name = default(string), int? Appearance = default(int?), bool? IsNew = default(bool?), string StoreDescription = default(string), string StoreIconUrl = default(string), string Description = default(string), bool? AuthInfo = default(bool?), string DetailRegistIdentify = default(string), int? UserId = default(int?), int? UserName = default(int?), string LastVersion = default(string), string LastUpdated = default(string), int? InstallQuantity = default(int?), int? DownloadQuantity = default(int?), string IconUrl = default(string), ThirdAppDevice DependDevices = default(ThirdAppDevice))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "IsNew" is required (not null)
            if (IsNew == null)
            {
                throw new InvalidDataException("IsNew is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.IsNew = IsNew;
            }
            // to ensure "StoreDescription" is required (not null)
            if (StoreDescription == null)
            {
                throw new InvalidDataException("StoreDescription is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.StoreDescription = StoreDescription;
            }
            // to ensure "StoreIconUrl" is required (not null)
            if (StoreIconUrl == null)
            {
                throw new InvalidDataException("StoreIconUrl is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.StoreIconUrl = StoreIconUrl;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "AuthInfo" is required (not null)
            if (AuthInfo == null)
            {
                throw new InvalidDataException("AuthInfo is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.AuthInfo = AuthInfo;
            }
            // to ensure "DetailRegistIdentify" is required (not null)
            if (DetailRegistIdentify == null)
            {
                throw new InvalidDataException("DetailRegistIdentify is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.DetailRegistIdentify = DetailRegistIdentify;
            }
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "UserName" is required (not null)
            if (UserName == null)
            {
                throw new InvalidDataException("UserName is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.UserName = UserName;
            }
            // to ensure "LastVersion" is required (not null)
            if (LastVersion == null)
            {
                throw new InvalidDataException("LastVersion is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.LastVersion = LastVersion;
            }
            // to ensure "LastUpdated" is required (not null)
            if (LastUpdated == null)
            {
                throw new InvalidDataException("LastUpdated is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.LastUpdated = LastUpdated;
            }
            // to ensure "InstallQuantity" is required (not null)
            if (InstallQuantity == null)
            {
                throw new InvalidDataException("InstallQuantity is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.InstallQuantity = InstallQuantity;
            }
            // to ensure "DownloadQuantity" is required (not null)
            if (DownloadQuantity == null)
            {
                throw new InvalidDataException("DownloadQuantity is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.DownloadQuantity = DownloadQuantity;
            }
            // to ensure "IconUrl" is required (not null)
            if (IconUrl == null)
            {
                throw new InvalidDataException("IconUrl is a required property for ThirdAppV2 and cannot be null");
            }
            else
            {
                this.IconUrl = IconUrl;
            }
            this.Appearance = Appearance;
            this.DependDevices = DependDevices;
        }
        
        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// 应用名称
        /// </summary>
        /// <value>应用名称</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 0：默认， 1：在详情和商城隐藏
        /// </summary>
        /// <value>0：默认， 1：在详情和商城隐藏</value>
        [DataMember(Name="appearance", EmitDefaultValue=false)]
        public int? Appearance { get; set; }

        /// <summary>
        /// 新服务
        /// </summary>
        /// <value>新服务</value>
        [DataMember(Name="is_new", EmitDefaultValue=false)]
        public bool? IsNew { get; set; }

        /// <summary>
        /// 商城简介/副标题
        /// </summary>
        /// <value>商城简介/副标题</value>
        [DataMember(Name="store_description", EmitDefaultValue=false)]
        public string StoreDescription { get; set; }

        /// <summary>
        /// 应用缩略图链接(显示在应用商城列表页)
        /// </summary>
        /// <value>应用缩略图链接(显示在应用商城列表页)</value>
        [DataMember(Name="store_icon_url", EmitDefaultValue=false)]
        public string StoreIconUrl { get; set; }

        /// <summary>
        /// 服务功能详情介绍(详情页)
        /// </summary>
        /// <value>服务功能详情介绍(详情页)</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// 授权信息
        /// </summary>
        /// <value>授权信息</value>
        [DataMember(Name="auth_info", EmitDefaultValue=false)]
        public bool? AuthInfo { get; set; }

        /// <summary>
        /// 服务在 JS 中注册的名字
        /// </summary>
        /// <value>服务在 JS 中注册的名字</value>
        [DataMember(Name="detail_regist_identify", EmitDefaultValue=false)]
        public string DetailRegistIdentify { get; set; }

        /// <summary>
        /// 开发者ID
        /// </summary>
        /// <value>开发者ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// 开发者名字
        /// </summary>
        /// <value>开发者名字</value>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public int? UserName { get; set; }

        /// <summary>
        /// 最新版本
        /// </summary>
        /// <value>最新版本</value>
        [DataMember(Name="last_version", EmitDefaultValue=false)]
        public string LastVersion { get; set; }

        /// <summary>
        /// 最后更新日期
        /// </summary>
        /// <value>最后更新日期</value>
        [DataMember(Name="last_updated", EmitDefaultValue=false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// 安装人数
        /// </summary>
        /// <value>安装人数</value>
        [DataMember(Name="install_quantity", EmitDefaultValue=false)]
        public int? InstallQuantity { get; set; }

        /// <summary>
        /// 下载量
        /// </summary>
        /// <value>下载量</value>
        [DataMember(Name="download_quantity", EmitDefaultValue=false)]
        public int? DownloadQuantity { get; set; }

        /// <summary>
        /// 应用图标
        /// </summary>
        /// <value>应用图标</value>
        [DataMember(Name="icon_url", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Gets or Sets DependDevices
        /// </summary>
        [DataMember(Name="depend_devices", EmitDefaultValue=false)]
        public ThirdAppDevice DependDevices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThirdAppV2 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Appearance: ").Append(Appearance).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("  StoreDescription: ").Append(StoreDescription).Append("\n");
            sb.Append("  StoreIconUrl: ").Append(StoreIconUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AuthInfo: ").Append(AuthInfo).Append("\n");
            sb.Append("  DetailRegistIdentify: ").Append(DetailRegistIdentify).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  LastVersion: ").Append(LastVersion).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  InstallQuantity: ").Append(InstallQuantity).Append("\n");
            sb.Append("  DownloadQuantity: ").Append(DownloadQuantity).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  DependDevices: ").Append(DependDevices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThirdAppV2);
        }

        /// <summary>
        /// Returns true if ThirdAppV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of ThirdAppV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThirdAppV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Appearance == input.Appearance ||
                    (this.Appearance != null &&
                    this.Appearance.Equals(input.Appearance))
                ) && 
                (
                    this.IsNew == input.IsNew ||
                    (this.IsNew != null &&
                    this.IsNew.Equals(input.IsNew))
                ) && 
                (
                    this.StoreDescription == input.StoreDescription ||
                    (this.StoreDescription != null &&
                    this.StoreDescription.Equals(input.StoreDescription))
                ) && 
                (
                    this.StoreIconUrl == input.StoreIconUrl ||
                    (this.StoreIconUrl != null &&
                    this.StoreIconUrl.Equals(input.StoreIconUrl))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AuthInfo == input.AuthInfo ||
                    (this.AuthInfo != null &&
                    this.AuthInfo.Equals(input.AuthInfo))
                ) && 
                (
                    this.DetailRegistIdentify == input.DetailRegistIdentify ||
                    (this.DetailRegistIdentify != null &&
                    this.DetailRegistIdentify.Equals(input.DetailRegistIdentify))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.LastVersion == input.LastVersion ||
                    (this.LastVersion != null &&
                    this.LastVersion.Equals(input.LastVersion))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.InstallQuantity == input.InstallQuantity ||
                    (this.InstallQuantity != null &&
                    this.InstallQuantity.Equals(input.InstallQuantity))
                ) && 
                (
                    this.DownloadQuantity == input.DownloadQuantity ||
                    (this.DownloadQuantity != null &&
                    this.DownloadQuantity.Equals(input.DownloadQuantity))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.DependDevices == input.DependDevices ||
                    (this.DependDevices != null &&
                    this.DependDevices.Equals(input.DependDevices))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Appearance != null)
                    hashCode = hashCode * 59 + this.Appearance.GetHashCode();
                if (this.IsNew != null)
                    hashCode = hashCode * 59 + this.IsNew.GetHashCode();
                if (this.StoreDescription != null)
                    hashCode = hashCode * 59 + this.StoreDescription.GetHashCode();
                if (this.StoreIconUrl != null)
                    hashCode = hashCode * 59 + this.StoreIconUrl.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.AuthInfo != null)
                    hashCode = hashCode * 59 + this.AuthInfo.GetHashCode();
                if (this.DetailRegistIdentify != null)
                    hashCode = hashCode * 59 + this.DetailRegistIdentify.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.LastVersion != null)
                    hashCode = hashCode * 59 + this.LastVersion.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.InstallQuantity != null)
                    hashCode = hashCode * 59 + this.InstallQuantity.GetHashCode();
                if (this.DownloadQuantity != null)
                    hashCode = hashCode * 59 + this.DownloadQuantity.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                if (this.DependDevices != null)
                    hashCode = hashCode * 59 + this.DependDevices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
